#!/usr/bin/python
#
# Copyright (c) 2025 Cisco and/or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from __future__ import absolute_import, division, print_function

__metaclass__ = type
__author__ = "Allen Robel"

DOCUMENTATION = """
---
module: dcnm_log
short_description: Log messages according to the configuration pointed to by the environment variable NDFC_LOGGING_CONFIG.
version_added: "3.6.0"
description:
    - "Log messages according to the configuration pointed to by the environment variable NDFC_LOGGING_CONFIG."
options:
  msg:
    description:
    - The message to log
    required: yes
    type: str
  severity:
    description:
    - Case-sensitive logging severity with which to log the msg (must be UPPERCASE)
    required: no
    default: DEBUG
    choices: ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'WARNING']
    type: str
author:
    - Allen Robel (@quantumonion)
"""

EXAMPLES = """
# This module can be used to correlate Ansible DCNM task execution with the
# log messages generated by the DCNM Ansible modules (when the NDFC_LOGGING_CONFIG
# environment variable is set to point to a valid python logging configuration)
#

- name: Log
  cisco.dcnm.dcnm_log:
    msg: dcnm_vrf.merged - Create VRF myVrf 
    severity: INFO

- name: dcnm_vrf.merged - Create VRF myVrf
  cisco.dcnm.dcnm_vrf:
    fabric: vxlan-fabric
    state: merged
    config:
    - vrf_name: myVrf
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 2000
      service_vrf_template: null
      attach:
      - ip_address: 192.168.1.224
      - ip_address: 192.168.1.225

- name: Log
  cisco.dcnm.dcnm_log:
    msg: dcnm_vrf.merged - Create VRF myVrf DONE 
    severity: INFO

"""  # noqa

RETURN = """
response:
    description:
    - result dictionary containing keys changed, msg, results, skipped
    returned: always
    type: dict
    elements: dict
"""
import logging

from ansible.module_utils.basic import AnsibleModule

from ..module_utils.common.log_v2 import Log


class DcnmLog:
    """
    Log messages from a playbook via the standard Python logging module.
    """

    def __init__(self, params):
        self.class_name = self.__class__.__name__

        self.log = logging.getLogger(f"dcnm.{self.class_name}")

        self.params = params
        self.message = self.params.get("msg")
        self.severity = self.params.get("severity")

        if self.message is None:
            msg = "Exiting. Missing mandatory parameter: msg"
            raise ValueError(msg)

        if self.severity is None:
            self.severity = "DEBUG"

        self.result = {}
        self.result["changed"] = False
        self.result["failed"] = False

    def msg(self) -> None:
        """
        # Summary

        Log message self.message with severity self.severity.

        ## Raises

        -   ValueError: if an error occurs when logging the message.
        """
        try:
            if self.severity == "CRITICAL":
                self.log.critical(self.message)
            if self.severity == "DEBUG":
                self.log.debug(self.message)
            if self.severity == "ERROR":
                self.log.error(self.message)
            if self.severity == "INFO":
                self.log.info(self.message)
            if self.severity == "WARNING":
                self.log.warning(self.message)
        except ValueError as error:
            raise ValueError from error


def main():
    """
    Entry point for module execution.
    """
    # Logging setup
    try:
        log = Log()
        log.commit()
    except (TypeError, ValueError):
        pass

    argument_spec = {}
    argument_spec["msg"] = {}
    argument_spec["msg"]["required"] = True

    argument_spec["severity"] = {}
    argument_spec["severity"]["required"] = False
    argument_spec["severity"]["default"] = "DEBUG"
    argument_spec["severity"]["choices"] = [
        "CRITICAL",
        "DEBUG",
        "ERROR",
        "INFO",
        "WARNING",
    ]

    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False)

    try:
        dcnm_log = DcnmLog(module.params)
    except ValueError as error:
        module.fail_json(msg=error)

    try:
        dcnm_log.msg()
    except ValueError as error:
        dcnm_log.result["failed"] = True
        module.fail_json(msg=error)

    module.exit_json(**dcnm_log.result)


if __name__ == "__main__":
    main()
