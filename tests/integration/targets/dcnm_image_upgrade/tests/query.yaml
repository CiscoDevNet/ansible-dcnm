################################################################################
# RUNTIME
################################################################################
#
# Recent run times (MM:SS.ms):
# 13:51.45
#
################################################################################
# STEPS
################################################################################
#
# SETUP (these should be run prior to running this playbook)
#  1. Run 00_setup_create_fabric.yaml
#  2. Run 01_setup_add_switches_to_fabric 
#  3. Run 02_setup_replace_image_policies
# PRE_TEST (this playbook)
#  4. QUERY - PRE_TEST - Upgrade all switches using global_config.
#  5. QUERY - PRE_TEST - Wait for controller response for all three switches.
# TEST (this playbook)
#  5. QUERY - TEST - Verify image_policy_1 is attached to all switches.
#  6. QUERY - TEST - Detach policies from two switches and verify.
#  7. QUERY - TEST - Verify image_policy_1 was removed from two switches.
#  8. QUERY - TEST - Detach policies from remaining switch and verify.
#  9. QUERY - TEST - Verify image_policy_1 was removed from all switches.
# CLEANUP
# 10. Run 03_cleanup_remove_devices_from_fabric.yaml
# 11. Run 04_cleanup_delete_image_policies.yaml
# 12. Run 05_cleanup_delete_fabric.yaml
#
################################################################################
# REQUIREMENTS
################################################################################
#
# Example vars for dcnm_image_upgrade integration tests
# Add to cisco/dcnm/playbooks/dcnm_tests.yaml)
#
# vars:
#   # This testcase field can run any test in the tests directory for the role
#   testcase: merged_global_config
#    fabric_name: LAN_Classic_Fabric
#    switch_username: admin
#    switch_password: "Cisco!2345"
#    leaf1: 192.168.1.2
#    leaf2: 192.168.1.3
#    spine1: 192.168.1.4
#    # for dcnm_image_policy and dcnm_image_upgrade roles
#    image_policy_1: "KR5M"
#    image_policy_2: "NR3F"
#    # for dcnm_image_policy role
#    epld_image_1: n9000-epld.10.2.5.M.img
#    epld_image_2: n9000-epld.10.3.1.F.img
#    nxos_image_1: n9000-dk9.10.2.5.M.bin
#    nxos_image_2: n9000-dk9.10.3.1.F.bin
#    nxos_release_1: 10.2.5_nxos64-cs_64bit
#    nxos_release_2: 10.3.1_nxos64-cs_64bit
#    # for dcnm_image_upgrade role
#    fabric_name_1: "{{ fabric_name }}"
#    ansible_switch_1: "{{ leaf1 }}"
#    ansible_switch_2: "{{ leaf2 }}"
#    ansible_switch_3: "{{ spine1 }}"
#
################################################################################
# QUERY - PRE_TEST - Upgrade all switches using global_config.
#
# NOTES:
#   1. Depending on whether the switches are already at the desired version, the
#      upgrade may not be performed.  Hence, we do not check for the upgrade
#      status in this test.
################################################################################

- name: QUERY - PRE_TEST - Upgrade all switches using global_config.
  cisco.dcnm.dcnm_image_upgrade:
    state: merged
    config:
        policy: "{{ image_policy_1 }}"
        reboot: false
        stage: true
        validate: true
        upgrade:
            nxos: true
            epld: false
        options:
            nxos:
                mode: disruptive
                bios_force: false
            epld:
                module: ALL
                golden: false
            reboot:
                config_reload: false
                write_erase: false
            package:
                install: false
                uninstall: false
        switches:
          - ip_address: "{{ ansible_switch_1 }}"
          - ip_address: "{{ ansible_switch_2 }}"
          - ip_address: "{{ ansible_switch_3 }}"
  register: result

- debug:
    var: result

################################################################################
# QUERY - PRE_TEST - Wait for controller response for all three switches.
################################################################################

- name: QUERY - PRE_TEST - Wait for controller response for all three switches
  cisco.dcnm.dcnm_image_upgrade:
    state: query
    config:
        switches:
        - ip_address: "{{ ansible_switch_1 }}"
        - ip_address: "{{ ansible_switch_2 }}"
        - ip_address: "{{ ansible_switch_3 }}"
  register: result
  until:
    - result.diff[0].ipAddress == ansible_switch_1
    - result.diff[1].ipAddress == ansible_switch_2
    - result.diff[2].ipAddress == ansible_switch_3
  retries: 60
  delay: 5
  ignore_errors: yes

################################################################################
# QUERY - TEST - Verify image_policy_1 is attached to all switches.
################################################################################

- name: QUERY - TEST - Verify image_policy_1 is attached to all switches.
  cisco.dcnm.dcnm_image_upgrade:
        state: query
        config:
            switches:
            - ip_address: "{{ ansible_switch_1 }}"
            - ip_address: "{{ ansible_switch_2 }}"
            - ip_address: "{{ ansible_switch_3 }}"
  register: result

- debug:
    var: result

- assert:
    that:
    - result.changed == false
    - result.failed == false
    - (result.diff | length) == 3
    - (result.response | length) == 1
    - (result.diff[0].ipAddress) == ansible_switch_1
    - (result.diff[1].ipAddress) == ansible_switch_2
    - (result.diff[2].ipAddress) == ansible_switch_3
    - (result.diff[0].policy) == image_policy_1
    - (result.diff[1].policy) == image_policy_1
    - (result.diff[2].policy) == image_policy_1
    - (result.diff[0].statusPercent) == 100
    - (result.diff[1].statusPercent) == 100
    - (result.diff[2].statusPercent) == 100

################################################################################
# QUERY - TEST - Detach policies from two switches and verify.
################################################################################

- name: QUERY - TEST - Detach policies from two switches and verify.
  cisco.dcnm.dcnm_image_upgrade:
        state: deleted
        config:
            policy: "{{ image_policy_1 }}"
            switches:
            - ip_address: "{{ ansible_switch_1 }}"
            - ip_address: "{{ ansible_switch_2 }}"
  register: result

- debug:
    var: result

- assert:
    that:
    - result.changed == true
    - result.failed == false
    - (result.diff | length) == 2
    - (result.response | length) == 1
    - result.diff[0]["action"] == "detach"
    - result.diff[1]["action"] == "detach"
    - result.response[0].RETURN_CODE == 200
    - result.response[0].DATA == "Successfully detach the policy from device."
    - result.response[0].METHOD == "DELETE"



################################################################################
# QUERY - TEST - Verify image_policy_1 was removed from two switches.
################################################################################

- name: QUERY - TEST - Verify image_policy_1 was removed from two switches.
  cisco.dcnm.dcnm_image_upgrade:
        state: query
        config:
            switches:
            - ip_address: "{{ ansible_switch_1 }}"
            - ip_address: "{{ ansible_switch_2 }}"
            - ip_address: "{{ ansible_switch_3 }}"
  register: result

- debug:
    var: result

- assert:
    that:
    - result.changed == false
    - result.failed == false
    - (result.diff | length) == 3
    - (result.response | length) == 1
    - (result.diff[0].ipAddress) == ansible_switch_1
    - (result.diff[1].ipAddress) == ansible_switch_2
    - (result.diff[2].ipAddress) == ansible_switch_3
    - (result.diff[0].policy) == "None"
    - (result.diff[1].policy) == "None"
    - (result.diff[2].policy) == image_policy_1
    - (result.diff[0].statusPercent) == 0
    - (result.diff[1].statusPercent) == 0
    - (result.diff[2].statusPercent) == 100

################################################################################
# QUERY - TEST - Detach policies from remaining switch and verify.
################################################################################

- name: QUERY - TEST - Detach policies from remaining switch and verify.
  cisco.dcnm.dcnm_image_upgrade:
        state: deleted
        config:
            policy: "{{ image_policy_1 }}"
            switches:
            - ip_address: "{{ ansible_switch_3 }}"
  register: result

- debug:
    var: result

- assert:
    that:
    - result.changed == true
    - result.failed == false
    - (result.diff | length) == 1
    - (result.response | length) == 1

################################################################################
# QUERY - TEST - Verify image_policy_1 was removed from all switches.
################################################################################

- name: QUERY - TEST - Verify image_policy_1 was removed from all switches.
  cisco.dcnm.dcnm_image_upgrade:
        state: query
        config:
            switches:
            - ip_address: "{{ ansible_switch_1 }}"
            - ip_address: "{{ ansible_switch_2 }}"
            - ip_address: "{{ ansible_switch_3 }}"
  register: result

- debug:
    var: result

- assert:
    that:
    - result.changed == false
    - result.failed == false
    - (result.diff | length) == 3
    - (result.response | length) == 1
    - (result.diff[0].ipAddress) == ansible_switch_1
    - (result.diff[1].ipAddress) == ansible_switch_2
    - (result.diff[2].ipAddress) == ansible_switch_3
    - (result.diff[0].policy) == "None"
    - (result.diff[1].policy) == "None"
    - (result.diff[2].policy) == "None"
    - (result.diff[0].statusPercent) == 0
    - (result.diff[1].statusPercent) == 0
    - (result.diff[2].statusPercent) == 0

################################################################################
# CLEANUP
################################################################################
# Run 03_cleanup_remove_devices_from_fabric.yaml
# Run 04_cleanup_delete_image_policies.yaml
# Run 05_cleanup_delete_fabric.yaml
################################################################################