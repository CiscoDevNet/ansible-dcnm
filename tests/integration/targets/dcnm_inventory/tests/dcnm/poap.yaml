---
- name: Test Entry Point - [dcnm_inventory - Poap]
  ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+     Executing Poap Tests - [dcnm_inventory]                  +"
      - "----------------------------------------------------------------"
  tags: poap

- name: Poap - Setup Internal TestCase Variables
  ansible.builtin.set_fact:
    test_data:
      test_fabric: "{{ ansible_it_fabric }}"
      sw1: "{{ ansible_switch1 }}"
      sw1_serial: "1ABC23DEFGH"
      sw2: "{{ ansible_switch2 }}"
      sw2_serial: "1ABC23DEFHI"
      poap_model: "ABC-D1230a"
      poap_version: "1.2(3)"
      poap_hostname: "Poap-SW"
      poap_modulesModel: "['ABC-D1230a']"
      poap_gateway: "192.168.2.1/24"
      sw3: "{{ ansible_switch3 }}"
      deploy: "{{ deploy }}"
    poap_enabled: False
    poap_switch_present: False
    found_fabric: False
  delegate_to: localhost
  tags: poap

# Below commented tasks are sample tasks to enable Bootstrap and DHCP along with DHCP configs
# Please make sure you provide correct values for required fields 
# Fabric config has many NDFC/DCNM auto generated values, so always GET the configs first
# and then set the required values.
# #
# - name: Poap Merged - Get the configs of the fabric deployed.
#   cisco.dcnm.dcnm_rest:
#     method: GET
#     path: "{{ rest_path }}"
#   register: result
#
# - set_fact:
#     result.response.DATA.nvPairs["BOOTSTRAP_ENABLE"] = true
#     result.response.DATA.nvPairs["DHCP_ENABLE"] = true
#     result.response.DATA.nvPairs["DHCP_IPV6_ENABLE"] = "DHCPv4"
#     result.response.DATA.nvPairs["DHCP_START"] = "192.168.1.10"
#     result.response.DATA.nvPairs["DHCP_END"] = "192.168.1.20"
#     result.response.DATA.nvPairs["MGMT_GW"] = "192.168.1.1"
#     result.response.DATA.nvPairs["MGMT_PREFIX"] = "24"
#
# - name: Poap Merged - Configure Bootstrap and DHCP on Fabric 
#   cisco.dcnm.dcnm_rest:
#     method: PUT
#     path: "{{ rest_path }}"
#     json_data: "{{ result.response.DATA }}"
#

# ----------------------------------------------
# Run Test Cases
# ----------------------------------------------
# Base Tests
- name: Poap Base Task - Query Fabric Existence
  cisco.dcnm.dcnm_fabric:
    state: query
    config:
    - FABRIC_NAME: "{{ test_data.test_fabric }}"
  register: query_result
  tags: poap

- name: Poap Base Task - Check Fabric
  ansible.builtin.set_fact:
    found_fabric: True
    fabric_data: "{{ item }}"
  when: item['fabricName'] ==  "{{ test_data.test_fabric }}"
  loop: "{{ query_result.response[0].DATA }}"
  tags: poap

- name: Poap Base Task - Assert Fabric Existence
  assert:
    that:
      - found_fabric == true
    fail_msg: "Fabric '{{ test_data.test_fabric }}' not found."
  tags: poap

- name: Poap Base Task - Set Variable
  ansible.builtin.set_fact:
    poap_enabled: True
  when: fabric_data.nvPairs["BOOTSTRAP_ENABLE"] == "true"
  tags: poap

- name: Poap Base Task - Prepare Validate Config
  ansible.builtin.set_fact:
    ndfc_fabric_delete_conf:
  delegate_to: localhost
  tags: poap

- name: Poap Base Task - Clean Up Existing Devices in Fabric
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ test_data.test_fabric }}"
    state: deleted
  register: deleted_result
  tags: poap

- name: Poap Base Task - Query Inventory State in Fabric 
  cisco.dcnm.dcnm_inventory:
    state: query
    fabric: "{{ test_data.test_fabric }}"
  register: query_result
  tags: poap

- name: Poap Base Task - Validate NDFC Data
  cisco.dcnm.tests.integration.ndfc_inventory_validate:
    ndfc_data: "{{ query_result }}"
    test_data: "{{ ndfc_fabric_delete_conf }}"
  register: result
  tags: poap

# ---------------------------------------------- #
#                  Merged                        # 
# ---------------------------------------------- #

# TC - 1
- name: Poap TC1 - Prepare Configuration
  ansible.builtin.set_fact:
    switch_conf:
      - seed_ip: "{{ test_data.sw2 }}"
        user_name: '{{ switch_username }}'
        password: '{{ switch_password }}'
        role: border
        poap:
          - preprovision_serial: "{{ test_data.sw2_serial }}"
            model: "{{ test_data.poap_model }}"
            version: "{{ test_data.poap_version }}"
            hostname: "{{ test_data.poap_hostname }}"
            config_data: 
              modulesModel: ["N9K-C9300v"]
              gateway: "10.15.15.1/24"
  when: poap_enabled == True
  delegate_to: localhost
  tags: poap

- name: Import Configuration Prepare Tasks
  vars:
    file: poap
  import_tasks: ../conf_prep_tasks.yml
  when: poap_enabled == True
  tags: poap

- name: Poap TC1 - Merged - Pre-provisioned Switch Configuration
  cisco.dcnm.dcnm_inventory: &conf_prepro
    fabric: "{{ test_data.test_fabric }}"
    state: merged
    config: "{{ ndfc_fabric_poap_conf }}"
    deploy: "{{ test_data.deploy }}"
  when: poap_enabled == True
  register: merged_result
  tags: poap

- name: Poap TC1 - Merged - Query Inventory State in Fabric 
  cisco.dcnm.dcnm_inventory:
    state: query
    fabric: "{{ test_data.test_fabric }}"
  when: poap_enabled == True
  register: query_result
  tags: poap

- name: Poap TC1 - Merged - Validate NDFC Data
  cisco.dcnm.tests.integration.ndfc_inventory_validate:
    ndfc_data: "{{ query_result }}"
    test_data: "{{ ndfc_fabric_poap_conf }}"
    changed: "{{ merged_result.changed }}"
  when: poap_enabled == True
  register: result
  tags: poap

# TC - 2
- name: Poap TC2 - Merged - Verify Idempotence
  cisco.dcnm.dcnm_inventory: *conf_prepro
  when: poap_enabled == True
  register: merged_result
  tags: poap

- assert:
    that:
    - 'merged_result.changed == false'
    - 'merged_result.response == "The switch provided is already part of the fabric and cannot be created again"'
  when: poap_enabled == True
  tags: poap

# TC - 3
- name: Poap TC3 - Query for POAP enabled swicthes
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ test_data.test_fabric }}"
    query_poap: True
    state: query
  when: poap_enabled == True
  register: query_result
  tags: poap

- assert:
    that:
    - 'query_result.response != None'
  when: poap_enabled == True
  tags: poap

- name: Poap TC3 - Check Query for POAP enabled swicthes
  set_fact:
    poap_switch_present: True
  when: (poap_enabled == True and (item['serialNumber'] == "{{ test_data.sw2_serial }}"))
  loop: "{{ query_result.response }}"
  ignore_errors: yes
  tags: poap

# TC - 4
- name: Poap TC4 - Prepare Configuration
  ansible.builtin.set_fact:
    switch_conf:
      - seed_ip: "{{ test_data.sw1 }}"
        role: border_gateway
        poap:
          - serial_number: "{{ test_data.sw1_serial }}"
            model: "{{ test_data.poap_model }}"
            version: "{{ test_data.poap_version }}"
            hostname: "{{ test_data.poap_hostname }}"
            config_data:
              modulesModel: "{{ test_data.poap_modulesModel }}"
              gateway: "{{ test_data.poap_gateway }}"
      - seed_ip: "{{ test_data.sw3 }}"
        auth_proto: MD5
        role: spine
      - seed_ip: "{{test_data.sw2}}"
        role: border
        poap:
          - preprovision_serial: "{{ test_data.sw2_serial }}"
            model: "{{ test_data.poap_model }}"
            version: "{{ test_data.poap_version }}"
            hostname: "{{ test_data.poap_hostname }}"
            config_data:
                modulesModel: "{{ test_data.poap_modulesModel }}"
                gateway: "{{ test_data.poap_gateway }}"
  when: (poap_enabled == True and poap_switch_present == True)
  delegate_to: localhost
  tags: poap

- name: Import Configuration Prepare Tasks
  vars:
    file: poap
  import_tasks: ../conf_prep_tasks.yml
  when: poap_enabled == True
  tags: poap

- name: Poap TC4 - Merge Config
  cisco.dcnm.dcnm_inventory: &conf_poap
    fabric: "{{ test_data.test_fabric }}"
    state: merged
    config: "{{ ndfc_fabric_poap_conf }}"
    deploy: "{{ test_data.deploy }}"
  when: (poap_enabled == True and poap_switch_present == True)
  register: merged_result
  tags: poap

- name: Poap TC4 - Merged - Query Inventory State in Fabric 
  cisco.dcnm.dcnm_inventory:
    state: query
    fabric: "{{ test_data.test_fabric }}"
  when: poap_enabled == True
  register: query_result
  tags: poap

- name: Poap TC4 - Merged - Validate NDFC Data
  cisco.dcnm.tests.integration.ndfc_inventory_validate:
    ndfc_data: "{{ query_result }}"
    test_data: "{{ ndfc_fabric_poap_conf }}"
    changed: "{{ merged_result.changed }}"
  when: (poap_enabled == True and poap_switch_present == True)
  register: result
  tags: poap

# TC - 5
- name: Poap TC5 - Verify Idempotence
  cisco.dcnm.dcnm_inventory: *conf_poap
  when: (poap_enabled == True and poap_switch_present == True)
  register: result
  tags: poap

- assert:
    that:
    - 'result.changed == false'
    - 'result.response == "The switch provided is already part of the fabric and cannot be created again"'
  when: (poap_enabled == True and poap_switch_present == True)
  tags: poap

# ----------------------------------------------
# Cleanup Fabric Switches
# ----------------------------------------------

- name: Poap - Clean Up Existing Devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ test_data.test_fabric }}"
    state: deleted
  when: (poap_enabled == True)
  register: deleted_result
  tags: poap
