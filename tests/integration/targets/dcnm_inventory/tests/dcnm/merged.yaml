##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    poap_enabled: False

- set_fact:
    poap_switch_present: False

- set_fact:
    rest_path: "/rest/control/fabrics/{{ ansible_it_fabric }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ ansible_it_fabric }}"
  when: controller_version >= "12"

- name: MERGED - Verify if fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result

- assert:
    that:
    - 'result.response.DATA != None'

- set_fact:
    poap_enabled: True
  when: result.response.DATA.nvPairs["BOOTSTRAP_ENABLE"] == "true"

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

##############################################
##                MERGED                    ##
##############################################

- name: MERGED - Merge a Switch using GreenField Deployment
  cisco.dcnm.dcnm_inventory: &conf
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - seed_ip: "{{ ansible_switch1 }}"
      auth_proto: MD5 # choose from [MD5, SHA, MD5_DES, MD5_AES, SHA_DES, SHA_AES]
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
      max_hops: 0
      role: leaf # default is Leaf - choose from [Leaf, Spine, Border, Border Spine, Border Gateway, Border Gateway Spine
                       # Super Spine, Border Super Spine, Border Gateway Super Spine]
      preserve_config: False # boolean, default is  true
  register: result

- assert:
    that:
    - 'result.changed == true'

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: MERGED - conf1 - GF - Idempotence
  cisco.dcnm.dcnm_inventory: *conf
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response == "The switch provided is already part of the fabric and cannot be created again"'

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - Merge a Switch using BrownField Deployment
  cisco.dcnm.dcnm_inventory: &conf_bf
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - seed_ip: "{{ ansible_switch1 }}"
      auth_proto: MD5 # choose from [MD5, SHA, MD5_DES, MD5_AES, SHA_DES, SHA_AES]
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
      max_hops: 0
      role: leaf # default is Leaf - choose from [Leaf, Spine, Border, Border Spine, Border Gateway, Border Gateway Spine
                       # Super Spine, Border Super Spine, Border Gateway Super Spine]
      preserve_config: True # boolean, default is  true
  register: result

- assert:
    that:
    - 'result.changed == true'

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: MERGED - conf2 -BF- Idempotence
  cisco.dcnm.dcnm_inventory: *conf_bf
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response == "The switch provided is already part of the fabric and cannot be created again"'

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - Merge a Switch using GreenField Deployment - Using default role/auth_proto
  cisco.dcnm.dcnm_inventory: &conf_def
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - seed_ip: "{{ ansible_switch1 }}"
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
      max_hops: 0
      preserve_config: False # boolean, default is  true
  register: result

- assert:
    that:
    - 'result.changed == true'

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: MERGED - conf1 - GF - Idempotence
  cisco.dcnm.dcnm_inventory: *conf_def
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response == "The switch provided is already part of the fabric and cannot be created again"'

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: Add Switch with Border Gateways and MD5 to fabric
  cisco.dcnm.dcnm_inventory: &conf_role
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - seed_ip: "{{ ansible_switch1  }}"
      max_hops: 0
      preserve_config: false
      role: border_gateway
      auth_proto: MD5
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
    - seed_ip: "{{ ansible_switch2 }}"
      max_hops: 0
      preserve_config: false
      role: border_gateway
      auth_proto: MD5
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
  register: result

- assert:
    that:
    - 'result.changed == true'

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: Wait for 40 secs
  wait_for:
    timeout: 40

- name: Add Switch with Border Gateways and MD5 to fabric - idempotence
  cisco.dcnm.dcnm_inventory: *conf_role
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response == "The switch provided is already part of the fabric and cannot be created again"'

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - Pre-provision switch Configuration
  cisco.dcnm.dcnm_inventory: &conf_prepro
    fabric: '{{ ansible_it_fabric }}'
    state: merged # Only 2 options supported merged/query for poap config
    config:
      # All the values below are mandatory if poap configuration is being done - state is merged
      - seed_ip: '{{ ansible_prepro_switch }}'
        user_name: '{{ switch_username }}'
        password: '{{ switch_password }}'
        role: border_gateway
        poap:
          - preprovision_serial: '{{ ansible_prepro_serial }}'
            model: '{{ ansible_prepro_model }}'
            version: '{{ ansible_prepro_swversion }}'
            hostname: '{{ ansible_prepro_hostname }}'
            config_data:
              modulesModel: '{{ ansible_modules_model }}'
              gateway: '{{ ansible_bstrap_gateway }}'
  when: poap_enabled == True
  register: result

- assert:
    that:
    - 'result.changed == true'
  when: (poap_enabled == True)

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  when: (poap_enabled == True)
  loop: '{{ result.response }}'

- name: MERGED - Pre-provision switch Configuration - Idempotence
  cisco.dcnm.dcnm_inventory: *conf_prepro
  when: poap_enabled == True
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response == "The switch provided is already part of the fabric and cannot be created again"'
  when: (poap_enabled == True)

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted
  when: (poap_enabled == True)

- name: MERGED - Query for POAP enabled swicthes
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    query_poap: True
    state: query
  when: poap_enabled == True
  register: result

- assert:
    that:
    - 'result.response != None'
  when: poap_enabled == True

- name: Check poap query for switches
  set_fact:
    poap_switch_present: True
  when: (poap_enabled == True and (item['serialNumber'] == '{{ ansible_poap_serial }}'))
  loop: '{{ result.response }}'
  ignore_errors: yes

- name: MERGED - Poap, Pre-provision and discovered switch Configuration
  cisco.dcnm.dcnm_inventory: &conf_poap
    fabric: '{{ ansible_it_fabric }}'
    state: merged # Only 2 options supported merged/query for poap config
    config:
      # All the values below are mandatory if poap configuration is being done - state is merged
      - seed_ip: '{{ ansible_poap_switch }}'
        user_name: '{{ switch_username }}'
        password: '{{ switch_password }}'
        role: border_gateway
        poap:
          - serial_number: '{{ ansible_poap_serial }}'
            model: '{{ ansible_poap_model }}'
            version: '{{ ansible_poap_swversion }}'
            hostname: '{{ ansible_poap_hostname }}'
            config_data:
              modulesModel: '{{ ansible_modules_model }}'
              gateway: '{{ ansible_bstrap_gateway }}'
      - seed_ip: '{{ ansible_switch1 }}'
        user_name: '{{ switch_username }}'
        password: '{{ switch_password }}'
        auth_proto: MD5
        max_hops: 0
        preserve_config: False
        role: spine
      - seed_ip: '{{ ansible_prepro_switch }}'
        user_name: '{{ switch_username }}'
        password: '{{ switch_password }}'
        role: border
        poap:
          - preprovision_serial: '{{ ansible_prepro_serial }}'
            model: '{{ ansible_prepro_model }}'
            version: '{{ ansible_prepro_swversion }}'
            hostname: '{{ ansible_prepro_hostname }}'
            config_data:
              modulesModel: '{{ ansible_modules_model }}'
              gateway: '{{ ansible_bstrap_gateway }}'
  when: (poap_enabled == True and poap_switch_present == True)
  register: result

- assert:
    that:
    - 'result.changed == true'
  when: (poap_enabled == True and poap_switch_present == True)

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  when: (poap_enabled == True and poap_switch_present == True)
  loop: '{{ result.response }}'

- name: MERGED - Poap, Pre-provision and discovered switch Configuration - Idempotence
  cisco.dcnm.dcnm_inventory: *conf_poap
  when: (poap_enabled == True and poap_switch_present == True)
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response == "The switch provided is already part of the fabric and cannot be created again"'
  when: (poap_enabled == True and poap_switch_present == True)

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted
  when: (poap_enabled == True)

- name: MERGED - Merge a Switch without seed_ip
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - seed_ip:
      auth_proto: MD5 # choose from [MD5, SHA, MD5_DES, MD5_AES, SHA_DES, SHA_AES]
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
      max_hops: 0
      role: leaf # default is Leaf - choose from [Leaf, Spine, Border, Border Spine, Border Gateway, Border Gateway Spine
                       # Super Spine, Border Super Spine, Border Gateway Super Spine]
      preserve_config: False # boolean, default is  true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid parameters in playbook: seed_ip : Required parameter not found" in result.msg'

- name: MERGED - Merge a Switch with invalid role choice
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - seed_ip: "{{ ansible_switch1 }}"
      auth_proto: MD5 # choose from [MD5, SHA, MD5_DES, MD5_AES, SHA_DES, SHA_AES]
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
      max_hops: 0
      role: nnnnddd # default is Leaf - choose from [Leaf, Spine, Border, Border Spine, Border Gateway, Border Gateway Spine
                       # Super Spine, Border Super Spine, Border Gateway Super Spine]
      preserve_config: False # boolean, default is  true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid choice provided" in result.msg'

- name: MERGED - Merge a Switch with invalid auth choice
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - seed_ip: "{{ ansible_switch1 }}"
      auth_proto: MD55DM # choose from [MD5, SHA, MD5_DES, MD5_AES, SHA_DES, SHA_AES]
      user_name: "{{ switch_username }}"
      password: "{{ switch_password }}"
      max_hops: 0
      role: leaf # default is Leaf - choose from [Leaf, Spine, Border, Border Spine, Border Gateway, Border Gateway Spine
                       # Super Spine, Border Super Spine, Border Gateway Super Spine]
      preserve_config: False # boolean, default is  true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid choice provided" in result.msg'


- name: MERGED - Merge a Switch without a config
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"config: element is mandatory for this state merged" in result.msg'

##############################################
##                 CLEAN-UP                 ##
##############################################

- name: MERGED - setup - Clean up any existing devices
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted
