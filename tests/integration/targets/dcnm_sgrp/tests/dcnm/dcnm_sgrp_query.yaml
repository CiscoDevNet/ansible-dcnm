##############################################
##               SETUP                      ##
##############################################

- name: Remove local log file
  local_action: command rm -f dcnm_sgrp.log

- name: Put the fabric to default state
  cisco.dcnm.dcnm_sgrp:
    fabric: "{{ ansible_it_fabric }}"
    state: overridden                     # choose from [merged, replaced, deleted, overridden, query]
    deploy: switches                      # choose from ["none", "switches"]
  register: result

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- block:

##############################################
##                MERGE                     ##
##############################################

    - name: Create Security Groups
      cisco.dcnm.dcnm_sgrp: &sgrp_replace
        fabric: "{{ ansible_it_fabric }}"
       #src_fabric: "{{ ansible_it_fabric }}"
        deploy: none                                        # choose from ["none", "switches"]
        state: merged                                       # choose from [merged, replaced, deleted, overridden, query]
        config:
          - group_name: "LSG_15001"
            group_id: 15001                                 # choose between [min:16, max:65535]
            ip_selectors: 
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50001
                ip: 10.1.1.1/24
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50001
                ip: 1001::01/64
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50001
                ip: 10.3.3.1/24
            network_selectors:
              - vrf_name: MyVRF_50001
                network: MyNetwork_30001
            switch:
              - "{{ ansible_switch1 }}"

          - group_name: "LSG_15002"
            group_id: 15002                                 # choose between [min:16, max:65535] 
            ip_selectors: 
              - type: "External Subnets"
                vrf_name: MyVRF_50002
                ip: 20.1.1.1/24
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50002
                ip: 2001::01/64
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50002
                ip: 20.3.3.0/24
            network_selectors:
              - vrf_name: MyVRF_50002
                network: MyNetwork_30002
            switch:
              - "{{ ansible_switch1 }}"

          - group_name: "LSG_15003"
            group_id: 15003                                 # choose between [min:16, max:65535] 
            ip_selectors: 
              - type: "External Subnets"
                vrf_name: MyVRF_50003
                ip: 30.1.1.1/24
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50003
                ip: 3001::01/64
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50003
                ip: 30.3.3.0/24
            network_selectors:
              - vrf_name: MyVRF_50003
                network: MyNetwork_30003
            switch:
              - "{{ ansible_switch1 }}"

          - group_name: "LSG_15004"
            group_id: 15004                                 # choose between [min:16, max:65535] 
            ip_selectors: 
              - type: "External Subnets"
                vrf_name: MyVRF_50004
                ip: 40.1.1.1/24
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50004
                ip: 4001::01/64
              - type: "Connected Endpoints"
                vrf_name: MyVRF_50004
                ip: 40.3.3.0/24
            network_selectors:
              - vrf_name: MyVRF_50004
                network: MyNetwork_30004
            switch:
              - "{{ ansible_switch1 }}"
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 4'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'

##############################################
##              QUERY                       ##
##############################################

    # Query Security groups
    - name: Query Security Groups - no filters
      cisco.dcnm.dcnm_sgrp:
        fabric: "{{ ansible_it_fabric }}"
       #src_fabric: "{{ ansible_it_fabric }}"
        deploy: none                                        # choose from ["none", "switches"]
        state: query
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'
          - '(result["response"] | length) != 0'

    # Query Security groups
    - name: Query Security Groups - with  IDs
      cisco.dcnm.dcnm_sgrp:
        fabric: "{{ ansible_it_fabric }}"
       #src_fabric: "{{ ansible_it_fabric }}"
        config:
          - group_id: 15001                                 # 16 - 65535
          - group_id: 15002                                 # 16 - 65535
          - group_id: 15003
          - group_id: 15004
        deploy: none                                        # choose from ["none", "switches"]
        state: query
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'
          - '(result["response"] | length) == 4'

    # Query Security groups
    - name: Query Security Groups - with names
      cisco.dcnm.dcnm_sgrp:
        fabric: "{{ ansible_it_fabric }}"
       #src_fabric: "{{ ansible_it_fabric }}"
        config:
          - group_name: "LSG_15001"
          - group_name: "LSG_15002"
          - group_name: "LSG_15003"
          - group_name: "LSG_15004"
        deploy: none                                        # choose from ["none", "switches"]
        state: query
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'
          - '(result["response"] | length) == 4'

    # Query Security groups
    - name: Query Security Groups - with names and IDs
      cisco.dcnm.dcnm_sgrp:
        fabric: "{{ ansible_it_fabric }}"
       #src_fabric: "{{ ansible_it_fabric }}"
        config:
          - group_name: "LSG_15001"
            group_id: 15001                                 # 16 - 65535
          - group_name: "LSG_15002"
            group_id: 15002                                 # 16 - 65535
          - group_name: "LSG_15003"
            group_id: 15003                                 # 16 - 65535
          - group_name: "LSG_15004"
            group_id: 15004                                 # 16 - 65535
        deploy: none                                        # choose from ["none", "switches"]
        state: query
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'
          - '(result["response"] | length) == 4'

    # Query Security groups
    - name: Query Security Groups - with names and IDs - one of them mismatching
      cisco.dcnm.dcnm_sgrp:
        fabric: "{{ ansible_it_fabric }}"
       #src_fabric: "{{ ansible_it_fabric }}"
        config:
          - group_name: "LSG_15001"
            group_id: 16001                                 # 16 - 65535
          - group_name: "LSG_16002"
            group_id: 15002                                 # 16 - 65535
          - group_name: "LSG_16003"
            group_id: 15003                                 # 16 - 65535
          - group_name: "LSG_15004"
            group_id: 16004                                 # 16 - 65535
        deploy: none                                        # choose from ["none", "switches"]
        state: query
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'
          - '(result["response"] | length) == 0'

    # Query Security groups
    - name: Query Security Groups - with non existing names and IDs
      cisco.dcnm.dcnm_sgrp:
        fabric: "{{ ansible_it_fabric }}"
       #src_fabric: "{{ ansible_it_fabric }}"
        config:
          - group_name: "LSG_20000"
            group_id: 10020                                 # 16 - 65535
          - group_name: "LSG_30001"
            group_id: 30001                                 # 16 - 65535
          - group_name: "LSG_50002"
            group_id: 10502                                 # 16 - 65535
          - group_name: "LSG_70003"
            group_id: 10073                                 # 16 - 65535
        deploy: none                                        # choose from ["none", "switches"]
        state: query
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'
          - '(result["response"] | length) == 0'

##############################################
##                CLEANUP                   ##
##############################################

  always:

    - name: Delete all created security groups
      cisco.dcnm.dcnm_sgrp:
        fabric: "{{ ansible_it_fabric }}"
        state: overridden                     # choose from [merged, replaced, deleted, overridden, query]
        deploy: switches                      # choose from ["none", "switches"]
      register: result
      when: IT_CONTEXT is not defined

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - 'item["MESSAGE"] == "OK"'
      loop: '{{ result.response }}'
      when: IT_CONTEXT is not defined
