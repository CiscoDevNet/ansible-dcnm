---

- set_fact:
    controller_version: "Unable to determine controller version"
  tags: sanity

- name: Determine version of DCNM or NDFC
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /appcenter/cisco/ndfc/api/about/version
  register: result
  ignore_errors: yes
  tags: sanity

- set_fact:
    controller_version: "{{ result.response['DATA']['version'][0:2] | int }}"
  when: ( result.response['DATA']['version'] is search("\d\d.\d+") )
  ignore_errors: yes
  tags: sanity

- name: Determine version of DCNM or NDFC
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /fm/fmrest/about/version
  register: result
  ignore_errors: yes
  tags: sanity

- set_fact:
    controller_version: "{{ result.response['DATA']['version'][0:2] | int }}"
  when: ( result.response['DATA']['version'] is search("\d\d.\d+") )
  ignore_errors: yes
  tags: sanity

# No need to continue if we cannot determine the DCNM/NDFC controller version
- assert:
    that:
    - 'controller_version != "Unable to determine controller version"'
  tags: sanity

- name: Remove all existing networks to start with a clean state
  cisco.dcnm.dcnm_network:
    fabric: "{{ test_fabric }}"
    state: deleted
  tags: sanity

- name: Create vrfs required for this test and remove all other vrfs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: overridden
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vlan_id: 500
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
      deploy: true
    - vrf_name: Tenant-1
      vrf_id: 9008012
      vlan_id: 501
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
      deploy: true
    - vrf_name: Tenant-2
      vrf_id: 9008013
      vlan_id: 502
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
      deploy: true
  tags: sanity

- { include_tasks: dcnm.yaml, tags: ['dcnm'] }
