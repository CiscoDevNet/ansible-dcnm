---
- name: MAIN - Setup Internal TestCase Variables
  ansible.builtin.set_fact:
    test_data_setup:
      #----------------------------------  
      # config template for vrf setup
      #----------------------------------
      vrf_conf_template: "dcnm_network_setup_vrf_conf.j2" 
      vrf_conf_file: "{{ role_path }}/files/dcnm_network_setup_vrf_conf.yaml"
      #----------------------------------
  delegate_to: localhost
  tags: always

- name: MAIN - QUERY - Verify Fabric Deployment
  cisco.dcnm.dcnm_fabric:
    state: query
    config:
      - FABRIC_NAME: "{{ test_data_common.fabric }}"
  register: result
  tags: always

- name: MAIN - ASSERT - Fabric Found
  assert:
    that:
      - result.result[0].found == true
    fail_msg: "Fabric '{{ test_data_common.fabric }}' not found."
  tags: always

- name: MAIN - Create VRF Config File using J2 Template
  ansible.builtin.template:
    src: "{{ test_data_setup.vrf_conf_template }}"
    dest: "{{ test_data_setup.vrf_conf_file }}"
  delegate_to: localhost
  tags: always

- name: MAIN - Load VRF Configuration
  ansible.builtin.set_fact:
    dcnm_network_setup_vrf_conf: "{{ lookup('file', '{{ test_data_setup.vrf_conf_file }}') | from_yaml }}"
  delegate_to: localhost
  tags: always

- name: MAIN - DELETED - delete all networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ test_data_common.fabric }}"
    state: deleted
  tags: always


- name: MAIN - OVERRIDDEN - Create vrfs required for this test and remove all other vrfs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_data_common.fabric }}"
    state: overridden
    config: "{{ dcnm_network_setup_vrf_conf }}"
  tags: always

- name: MAIN - Set Full Test Case Path
  set_fact:
    full_testcase_path: "{{ role_path }}/tests/dcnm/{{ testcase }}.yaml"
    testcase_is_glob: "{{ testcase.endswith('/*') }}"
    testcase_dir: "{{ role_path }}/tests/dcnm/{{ testcase | regex_replace('/\\*$', '') }}"
  delegate_to: localhost
  tags: always

- name: MAIN - Check if Test Case File Exists (single file)
  stat:
    path: "{{ full_testcase_path }}"
  register: testcase_stat
  delegate_to: localhost
  when: not testcase_is_glob
  tags: always

- name: MAIN - Find Test Case Files (glob pattern)
  find:
    paths: "{{ testcase_dir }}"
    patterns: "*.yaml"
    recurse: no
  register: testcase_glob
  delegate_to: localhost
  when: testcase_is_glob
  tags: always

- name: MAIN - Set Test Cases Fact
  set_fact:
    test_cases:
      files: "{{ [{'path': full_testcase_path}] if (not testcase_is_glob and testcase_stat.stat.exists) else (testcase_glob.files if testcase_is_glob else []) }}"
  delegate_to: localhost
  tags: always

- name: MAIN - Build List of Test Items
  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
  delegate_to: localhost
  tags: always

- name: MAIN - Run Test Cases
  include_tasks: "{{ test_case_to_run }}"
  with_items: "{{ test_items }}"
  loop_control:
    loop_var: test_case_to_run
  tags: always

- name: MAIN - DELETED - delete all networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ test_data_common.fabric }}"
    state: deleted
  tags: always

- name: MAIN - DELETED - Clean Up Any Existing VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_data_common.fabric }}"
    state: deleted
  tags: always
