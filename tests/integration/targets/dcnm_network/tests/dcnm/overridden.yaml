##############################################
##                 SETUP                    ##
##############################################

- name: OVERRIDDEN - Verify if fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /rest/control/fabrics/{{ ansible_it_fabric }}
  register: result

- assert:
    that:
    - 'result.response.DATA.fabricName == "{{ ansible_it_fabric }}"'

- name: OVERRIDDEN - setup - Clean up any existing networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: OVERRIDDEN - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

- name: OVERRIDDEN - Create, Attach and Deploy Multiple Network with Single Switch Attach
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: [Ethernet1/1, Ethernet1/2]
        deploy: true
      - ip_address: "{{ ansible_switch2 }}"
        ports: [Ethernet1/13, Ethernet1/14]
        deploy: true
    - net_name: ansible-net12
      vrf_name: Tenant-2
      net_id: 7002
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 151
      gw_ip_subnet: '192.168.40.1/24'
      attach:
      - ip_address: "{{ ansible_switch2 }}"
        ports: [Ethernet1/11, Ethernet1/12]
        deploy: true
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - '(result.response[2].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[2].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'
    - 'result.diff[1].attach[0].deploy == true'
    - '"{{ ansible_switch2 }}" in result.diff[1].attach[0].ip_address'
    - 'result.diff[1].net_name == "ansible-net12"'
    - 'result.diff[1].net_id == 7002'
    - 'result.diff[1].vrf_name == "Tenant-2"'

- name: OVERRIDDEN - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

##############################################
##                OVERRIDDEN                ##
##############################################

- name: OVERRIDDEN - Create, Attach and Deploy Multiple Network with Single Switch Attach
  cisco.dcnm.dcnm_network: &conf1
    fabric: "{{ ansible_it_fabric }}"
    state: overridden
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 150
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        # Replace the ports with new ports
        # ports: [Ethernet1/1, Ethernet1/2]
        ports: [Ethernet1/1, Ethernet1/17]
        deploy: true
      # delete the second network
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - 'result.response[4].RETURN_CODE == 200'
    - 'result.response[5].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[4].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[4].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.response[3].METHOD == "DELETE"'
    - 'result.diff[0].attach[0].deploy == false'
    - 'result.diff[0].attach[1].deploy == true'
    - 'result.diff[0].attach[2].deploy == false'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[1].ip_address'
    - '"{{ ansible_switch2 }}" in result.diff[0].attach[2].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'
    - 'result.diff[1].attach[0].deploy == false'
    - '"{{ ansible_switch2 }}" in result.diff[1].attach[0].ip_address'
    - 'result.diff[1].net_name == "ansible-net12"'

- name: OVERRIDDEN - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

- name: OVERRIDDEN - conf1 - Idempotence
  cisco.dcnm.dcnm_network: *conf1
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

##############################################
##                 CLEAN-UP                 ##
##############################################

- name: OVERRIDDEN - setup - remove any networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted
