##############################################
##                 SETUP                    ##
##############################################

- name: QUERY - Verify if fabric - Fabric1 is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /rest/control/fabrics/{{ ansible_it_fabric }}
  register: result

- assert:
    that:
    - 'result.response.DATA != None'

- name: QUERY - setup - Clean up any existing networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: QUERY - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

- name: QUERY - Create, Attach and Deploy Multiple Network with Single Switch Attach
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: [Ethernet1/1, Ethernet1/2]
        deploy: true
    - net_name: ansible-net12
      vrf_name: Tenant-2
      net_id: 7002
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 151
      gw_ip_subnet: '192.168.40.1/24'
      attach:
      - ip_address: "{{ ansible_switch2 }}"
        ports: [Ethernet1/11, Ethernet1/12]
        deploy: true
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - '(result.response[2].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[2].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'
    - 'result.diff[1].attach[0].deploy == true'
    - '"{{ ansible_switch2 }}" in result.diff[1].attach[0].ip_address'
    - 'result.diff[1].net_name == "ansible-net12"'
    - 'result.diff[1].net_id == 7002'
    - 'result.diff[1].vrf_name == "Tenant-2"'

- name: QUERY - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

###############################################
###                QUERY                     ##
###############################################

- name: QUERY - Query the Network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: query
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
    - net_name: ansible-net12
      vrf_name: Tenant-2
      net_id: 7002
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 151
      gw_ip_subnet: '192.168.40.1/24'
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response[0].parent.networkName == "ansible-net13"'
    - 'result.response[0].parent.networkId == 7005'
    - 'result.response[0].parent.networkTemplate == "Default_Network_Universal"'
    - 'result.response[0].parent.vrf == "Tenant-1"'
    - 'result.response[0].attach[0].isLanAttached== true'
    - 'result.response[0].attach[0].lanAttachState== "DEPLOYED"'
    - 'result.response[0].attach[0].networkName== "ansible-net13"'
    - 'result.response[0].attach[1].isLanAttached== false'
    - 'result.response[0].attach[1].lanAttachState== "NA"'
    - 'result.response[0].attach[1].networkName== "ansible-net13"'
    - 'result.response[1].parent.networkName == "ansible-net12"'
    - 'result.response[1].parent.networkId == 7002'
    - 'result.response[1].parent.networkTemplate == "Default_Network_Universal"'
    - 'result.response[1].parent.vrf == "Tenant-2"'
    - 'result.response[1].attach[0].isLanAttached== true'
    - 'result.response[1].attach[0].lanAttachState== "DEPLOYED"'
    - 'result.response[1].attach[0].networkName== "ansible-net12"'
    - 'result.response[1].attach[1].isLanAttached== false'
    - 'result.response[1].attach[1].lanAttachState== "NA"'
    - 'result.response[1].attach[1].networkName== "ansible-net12"'

- name: QUERY - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: QUERY - Query the Network without the config element
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: query
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response[0].parent.networkName == "ansible-net13"'
    - 'result.response[0].parent.networkId == 7005'
    - 'result.response[0].parent.networkTemplate == "Default_Network_Universal"'
    - 'result.response[0].parent.vrf == "Tenant-1"'
    - 'result.response[0].attach[0].isLanAttached== true'
    - 'result.response[0].attach[0].lanAttachState== "DEPLOYED"'
    - 'result.response[0].attach[0].networkName== "ansible-net13"'
    - 'result.response[0].attach[1].isLanAttached== false'
    - 'result.response[0].attach[1].lanAttachState== "NA"'
    - 'result.response[0].attach[1].networkName== "ansible-net13"'
    - 'result.response[1].parent.networkName == "ansible-net12"'
    - 'result.response[1].parent.networkId == 7002'
    - 'result.response[1].parent.networkTemplate == "Default_Network_Universal"'
    - 'result.response[1].parent.vrf == "Tenant-2"'
    - 'result.response[1].attach[0].isLanAttached== true'
    - 'result.response[1].attach[0].lanAttachState== "DEPLOYED"'
    - 'result.response[1].attach[0].networkName== "ansible-net12"'
    - 'result.response[1].attach[1].isLanAttached== false'
    - 'result.response[1].attach[1].lanAttachState== "NA"'
    - 'result.response[1].attach[1].networkName== "ansible-net12"'

- name: QUERY - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: QUERY - Delete all the networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - 'result.response[0].MESSAGE == "OK"'
    - 'result.response[1].MESSAGE == "OK"'
    - 'result.response[2].MESSAGE == "OK"'
    - 'result.response[3].MESSAGE == "OK"'
    - 'result.response[3].METHOD == "DELETE"'
    - '(result.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[0].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == false'
    - 'result.diff[1].attach[0].deploy == false'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ ansible_switch2 }}" in result.diff[1].attach[0].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[1].net_name == "ansible-net12"'

- name: QUERY - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

- name: QUERY - Query the non available Network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: query
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-2
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
    - net_name: ansible-net12
      vrf_name: Tenant-2
      net_id: 7002
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 151
      gw_ip_subnet: '192.168.40.1/24'
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

###############################################
###                 CLEAN-UP                 ##
###############################################

- name: QUERY - setup - remove any networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted
