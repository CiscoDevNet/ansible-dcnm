##############################################
##                 SETUP                    ##
##############################################

- name: MERGED - Verify if fabric - Fabric1 is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /rest/control/fabrics/{{ ansible_it_fabric }}
  register: result

- assert:
    that:
    - 'result.response.DATA != None'

- name: MERGED - setup - Clean up any existing networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

##############################################
##                MERGED                    ##
##############################################

- name: MERGED - Create New Network without Deploy
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      deploy: False
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.diff[0].attach|length == 0'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'

- name: MERGED - setup - Clean up any existing networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - Create New Network with Deploy
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      deploy: True
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.diff[0].attach|length == 0'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'

- name: MERGED - setup - Clean up any existing networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - Create New Network with Attach and global deploy
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
      deploy: True
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'

- name: MERGED - setup - Clean up any existing networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - Create New Network with Attach specific deploy and no global deploy
  cisco.dcnm.dcnm_network: &conf
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
        deploy: True
      deploy: False
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - conf - Idempotence
  cisco.dcnm.dcnm_network: *conf
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: MERGED - setup - Clean up any existing network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - Create, Attach and Deploy Multiple Network with Single Switch Attach
  cisco.dcnm.dcnm_network: &conf1
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
        deploy: true
    - net_name: ansible-net12
      vrf_name: Tenant-2
      net_id: 7002
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 151
      gw_ip_subnet: '192.168.40.1/24'
      attach:
      - ip_address: "{{ ansible_switch2 }}"
        ports: ["{{ ansible_sw2_int5 }}", "{{ ansible_sw2_int6 }}"]
        deploy: true
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - '(result.response[2].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[2].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'
    - 'result.diff[1].attach[0].deploy == true'
    - '"{{ ansible_switch2 }}" in result.diff[1].attach[0].ip_address'
    - 'result.diff[1].net_name == "ansible-net12"'
    - 'result.diff[1].net_id == 7002'
    - 'result.diff[1].vrf_name == "Tenant-2"'

- name: MERGED - conf1 - Idempotence
  cisco.dcnm.dcnm_network: *conf1
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - setup - Clean up any existing network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - Create, Attach and Deploy Multiple Network with Single Switch Attach with check mode set to true
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    check_mode: true
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
        deploy: true
    - net_name: ansible-net12
      vrf_name: Tenant-2
      net_id: 7002
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 151
      gw_ip_subnet: '192.168.40.1/24'
      attach:
      - ip_address: "{{ ansible_switch2 }}"
        ports: ["{{ ansible_sw2_int5 }}", "{{ ansible_sw2_int6 }}"]
        deploy: true
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == false'
    - '(result["response"] | length) == 0'

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - setup - Clean up any existing network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - Create, Attach and Deploy Single Network with Multiple Switch Attach
  cisco.dcnm.dcnm_network: &conf2
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
        deploy: true
      - ip_address: "{{ ansible_switch2 }}"
        ports: ["{{ ansible_sw2_int5 }}", "{{ ansible_sw2_int6 }}"]
        deploy: true
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ ansible_switch2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'

- name: MERGED - conf2 - Idempotence
  cisco.dcnm.dcnm_network: *conf2
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - setup - Clean up any existing network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - Create, Attach and Deploy Multiple Network with Multiple Switch Attach - Automatic Vlan Proposed
  cisco.dcnm.dcnm_network: &conf3
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      gw_ip_subnet: '192.168.30.1/24'
      attach:
        - ip_address: "{{ ansible_switch1 }}"
          ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
          deploy: true
        - ip_address: "{{ ansible_switch2 }}"
          ports: ["{{ ansible_sw2_int3 }}", "{{ ansible_sw2_int4 }}"]
          deploy: true
    - net_name: ansible-net12
      vrf_name: Tenant-2
      net_id: 7002
      vlan_id: 1500
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      gw_ip_subnet: '192.168.40.1/24'
      attach:
        - ip_address: "{{ ansible_switch2 }}"
          ports: ["{{ ansible_sw2_int5 }}", "{{ ansible_sw2_int6 }}"]
          deploy: true
        - ip_address: "{{ ansible_switch1 }}"
          ports: ["{{ ansible_sw1_int3 }}", "{{ ansible_sw1_int4 }}"]
          deploy: true
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - '(result.response[2].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[2].DATA|dict2items)[1].value == "SUCCESS"'
    - '(result.response[2].DATA|dict2items)[2].value == "SUCCESS"'
    - '(result.response[2].DATA|dict2items)[3].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'
    - 'result.diff[1].attach[0].deploy == true'
    - '"{{ ansible_switch2 }}" in result.diff[1].attach[0].ip_address'
    - 'result.diff[1].net_name == "ansible-net12"'
    - 'result.diff[1].net_id == 7002'
    - 'result.diff[1].vrf_name == "Tenant-2"'

- name: MERGED - conf3 - Idempotence
  cisco.dcnm.dcnm_network: *conf3
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: MERGED - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

- name: MERGED - setup - Clean up any existing network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - Create, Attach and Deploy Single Network with Multiple Switch Attach - Routing Tag Specified
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      routing_tag: 321
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
        deploy: true
      - ip_address: "{{ ansible_switch2 }}"
        ports: ["{{ ansible_sw2_int5 }}", "{{ ansible_sw2_int6 }}"]
        deploy: true
      deploy: false
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ ansible_switch2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].net_name == "ansible-net13"'
    - 'result.diff[0].net_id == 7005'
    - 'result.diff[0].vrf_name == "Tenant-1"'

- name: MERGED - sleep for 20 seconds for DCNM to completely update the state
  wait_for:
    timeout: 20

- name: MERGED - Create Network with invalid network name
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name:
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid parameters in playbook: net_name : Required parameter not found" in result.msg'

- name: MERGED - Create Network with invalid VRF name
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1000
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"VRF: Tenant-1000 is missing in fabric: Fabric1" in result.msg'

- name: MERGED - Create Network with invalid vlan id
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 15000
      gw_ip_subnet: '192.168.30.1/24'
      deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid parameters in playbook: vlan_id:15000 : The item exceeds the allowed range of max 4094" in result.msg'

- name: MERGED - Create Network and deploy in invalid switch
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address:
        ports: ["{{ ansible_sw1_int1 }}", "{{ ansible_sw1_int2 }}"]
        deploy: true
      deploy: false
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid parameters in playbook: ip_address : Required parameter not found" in result.msg'

- name: MERGED - Create Network and deploy in switch with null interface
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      gw_ip_subnet: '192.168.30.1/24'
      attach:
      - ip_address: "{{ ansible_switch1 }}"
        ports:
        deploy: true
      deploy: false
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid parameters in playbook: ports : Required parameter not found" in result.msg'

- name: MERGED - Create Network with out of range routing tag
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
    - net_name: ansible-net13
      vrf_name: Tenant-1000
      net_id: 7005
      net_template: Default_Network_Universal
      net_extension_template: Default_Network_Extension_Universal
      vlan_id: 1500
      routing_tag: 4294967296
      gw_ip_subnet: '192.168.30.1/24'
      deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"routing_tag:4294967296 : The item exceeds the allowed range of max 4294967295" in result.msg'

- name: MERGED - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

- name: MERGED - setup - Clean up any existing network
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

##############################################
##                 CLEAN-UP                 ##
##############################################

- name: MERGED - setup - remove any networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted

