##############################################
##               SETUP                      ##
##############################################

- name: Remove local log file
  local_action: command rm -f dcnm_links.log

- block:

##############################################
##               DELETE                     ##
##############################################

    - name: Initial setup - Delete Links on numbered fabric
      cisco.dcnm.dcnm_links: &links_delete
        state: deleted                                           # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # Destination fabric
            src_interface: "{{ intf_1_3 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_3 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # Device on the Destination fabric

          - dst_fabric: "{{ ansible_unnum_fabric }}"             # Destination fabric
            src_interface: "{{ intf_1_4 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_4 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # Device on the Destination fabric

          - dst_fabric: "{{ ansible_unnum_fabric }}"             # Destination fabric
            src_interface: "{{ intf_1_5 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_5 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # Device on the Destination fabric

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # Destination fabric
            src_interface: "{{ intf_1_6 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_6 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # Device on the Destination fabric

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # Destination fabric
            src_interface: "{{ intf_1_7 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_7 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # Device on the Destination fabric

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # Destination fabric
            src_interface: "{{ intf_1_8 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_8 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # Device on the Destination fabric

      register: result

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
      loop: '{{ result.response }}'

##############################################
##                MERGE                     ##
##############################################

    - name: Create Links without including optional parameters
      cisco.dcnm.dcnm_links: &links_merge_no_opt
        state: merged                                            # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        deploy: false
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # Destination fabric
            src_interface: "{{ intf_1_3 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_3 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # Device on the Destination fabric
            template: ext_fabric_setup                           # template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
            profile:
              ipv4_subnet: 193.168.1.1/24                        # IP address of interface in src fabric with mask
              neighbor_ip: 193.168.1.2                           # IP address of the interface in dst fabric
              src_asn: "{{ ansible_num_asn }}"                   # BGP ASN in source fabric
              dst_asn: "{{ ansible_unnum_asn }}"                 # BGP ASN in destination fabric
              mtu: 9216                                          # 

          - dst_fabric: "{{ ansible_unnum_fabric }}"             # Destination fabric
            src_interface: "{{ intf_1_4 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_4 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # Device on the Destination fabric
            template: ext_multisite_underlay_setup               # template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
            profile:
              ipv4_subnet: 193.168.2.1/24                        # IP address of interface in src fabric with mask
              neighbor_ip: 193.168.2.2                           # IP address of the interface in dst fabric
              src_asn: "{{ ansible_num_asn }}"                   # BGP ASN in source fabric
              dst_asn: "{{ ansible_unnum_asn }}"                 # BGP ASN in destination fabric
              mtu: 9216                                          # 

          - dst_fabric: "{{ ansible_unnum_fabric }}"             # Destination fabric
            src_interface: "{{ intf_1_5 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_5 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # Device on the Destination fabric
            template: ext_evpn_multisite_overlay_setup           # template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
            profile:
              ipv4_addr: 193.168.3.1                             # IP address of interface in src fabric
              neighbor_ip: 193.168.3.2                           # IP address of the interface in dst fabric
              src_asn: "{{ ansible_num_asn }}"                   # BGP ASN in source fabric
              dst_asn: "{{ ansible_unnum_asn }}"                 # BGP ASN in destination fabric
              trm_enabled: false                                 # optional, default is false

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # Destination fabric
            src_interface: "{{ intf_1_6 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_6 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # Device on the Destination fabric
            template: ext_fabric_setup                           # template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
            profile:
              ipv4_subnet: 193.168.4.1/24                        # IP address of interface in src fabric with mask
              neighbor_ip: 193.168.4.2                           # IP address of the interface in dst fabric
              src_asn: "{{ ansible_num_asn }}"                   # BGP ASN in source fabric
              dst_asn: "{{ ansible_ipv6_asn }}"                  # BGP ASN in destination fabric
              mtu: 9216                                          # 

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # Destination fabric
            src_interface: "{{ intf_1_7 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_7 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # Device on the Destination fabric
            template: ext_multisite_underlay_setup               # template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
            profile:
              ipv4_subnet: 193.168.5.1/24                        # IP address of interface in src fabric with mask
              neighbor_ip: 193.168.5.2                           # IP address of the interface in dst fabric
              src_asn: "{{ ansible_num_asn }}"                   # BGP ASN in source fabric
              dst_asn: "{{ ansible_ipv6_asn }}"                  # BGP ASN in destination fabric
              mtu: 9216                                          # 

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # Destination fabric
            src_interface: "{{ intf_1_8 }}"                      # Interface on the Source fabric
            dst_interface: "{{ intf_1_8 }}"                      # Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # Device on the Destination fabric
            template: ext_evpn_multisite_overlay_setup           # template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
            profile:
              ipv4_addr: 193.168.6.1                             # IP address of interface in src fabric
              neighbor_ip: 193.168.6.2                           # IP address of the interface in dst fabric
              src_asn: "{{ ansible_num_asn }}"                   # BGP ASN in source fabric
              dst_asn: "{{ ansible_ipv6_asn }}"                  # BGP ASN in destination fabric
              trm_enabled: false                                 # optional, default is false

      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 6'
          - '(result["diff"][0]["modified"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
      loop: '{{ result.response }}'


###############################################
###             QUERY                        ##
###############################################

    - name: Query Links - with Src Fabric
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 6'

    - name: Query Links - with Src & Dst Fabric
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 3'

    - name: Query Links - with Src & Dst Fabric
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 3'

    - name: Query Links - with Src & Dst Fabric, Src Intf
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
            src_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Source fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src Intf
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
            src_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Source fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
            src_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Destination fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
            src_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Destination fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf, Src Device
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
            src_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf, Src Device
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
            src_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf, Src & Dst Device
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
            src_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # optional, Device on the Destination fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf, Src & Dst Device
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
            src_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # optional, Device on the Destination fabric
      register: result

    - assert:
        that:
          '(result["response"] | length) >= 1'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf, Src & Dst Device, Template
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
            src_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_3 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # optional, Device on the Destination fabric
            template: ext_fabric_setup                           # optional, template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
                                                    

          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
            src_interface: "{{ intf_1_4 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_4 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # optional, Device on the Destination fabric
            template: ext_multisite_underlay_setup               # optional, template to be applied, choose from
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]

          - dst_fabric: "{{ ansible_unnum_fabric }}"             # optional, Destination fabric
            src_interface: "{{ intf_1_5 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_5 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_unnum_switch1 }}"            # optional, Device on the Destination fabric
            template: ext_evpn_multisite_overlay_setup           # optional, template to be applied, choose from
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]

      register: result

    - assert:
        that:
          '(result["response"] | length) >= 3'

    - name: Query Links - with Src & Dst Fabric, Src & Dst Intf, Src & Dst Device, Template
      cisco.dcnm.dcnm_links: 
        state: query                                             # choose from [merged, replaced, deleted, query]
        src_fabric: "{{ ansible_num_fabric }}"
        config:
          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
            src_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_6 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # optional, Device on the Destination fabric
            template: ext_fabric_setup                           # optional, template to be applied, choose from 
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]
                                                    

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
            src_interface: "{{ intf_1_7 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_7 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # optional, Device on the Destination fabric
            template: ext_multisite_underlay_setup               # optional, template to be applied, choose from
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]

          - dst_fabric: "{{ ansible_ipv6_fabric }}"              # optional, Destination fabric
            src_interface: "{{ intf_1_8 }}"                      # optional, Interface on the Source fabric
            dst_interface: "{{ intf_1_8 }}"                      # optional, Interface on the Destination fabric
            src_device: "{{ ansible_num_switch1 }}"              # optional, Device on the Source fabric
            dst_device: "{{ ansible_ipv6_switch1 }}"             # optional, Device on the Destination fabric
            template: ext_evpn_multisite_overlay_setup           # optional, template to be applied, choose from
                                                                 #   [ ext_fabric_setup, ext_multisite_underlay_setup,
                                                                 #     ext_evpn_multisite_overlay_setup ]

      register: result

    - assert:
        that:
          '(result["response"] | length) >= 3'

##############################################
##             CLEANUP                      ##
##############################################

  always:

    - name: Cleanup - Delete Links 
      cisco.dcnm.dcnm_links: *links_delete
      register: result
      when: IT_CONTEXT is not defined

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
      loop: '{{ result.response }}'
      when: IT_CONTEXT is not defined
