################################################################################
# RUNTIME
################################################################################
# Recent run times (MM:SS.ms):
# 00:77.09
################################################################################
# DESCRIPTION - FABRIC MERGED STATE TEST with SAVE and DEPLOY
#
# Test merge of new fabric configurations and verify results.
# Test config-save and config-deploy on populated fabrics.
# - VXLAN_EVPN_MSD fabric not tested.
# - See dcnm_fabric_merged_basic.yaml for VXLAN_EVPN_MSD test.
# - config-save and config-deploy are tested.
# - See dcnm_fabric_merged_basic.yaml for quicker test without save/deploy.
################################################################################
# STEPS
################################################################################
# SETUP
################################################################################
# 1. The following fabrics must be empty on the controller (or not exist).
#    See vars: section in cisco/dcnm/playbooks/dcnm_tests.yaml
#    - fabric_name_1
#    - fabric_type_1  # VXLAN_EVPN
#    - fabric_name_3
#    - fabric_type_3  # LAN_CLASSIC
# 2. Delete fabrics under test, if they exist
#    - fabric_name_1
#    - fabric_name_3
################################################################################
# TEST
################################################################################
# 3. Create fabrics and verify result
#    - fabric_name_1
#    - fabric_name_3
# 4. Add switch to each fabric and verify result
# 5. Merge additional configs into each fabric and verify result
#    This step includes config-save and config-deploy
################################################################################
# CLEANUP
################################################################################
# 7. Delete fabrics under test
#    - fabric_name_1
#    - fabric_name_3
################################################################################
# REQUIREMENTS
################################################################################
# Inventory:
# ./playbooks/roles/dcnm_fabric/dcnm_hosts.yaml
# Playbook:
# ./playbooks/roles/dcnm_fabric/dcnm_tests.yaml
# Roles:
# ./tests/integration/targets/dcnm_fabric/tests/*.yaml
#
# Example vars:
#
# vars:
#   testcase: dcnm_fabric_merged_save_deploy
#   fabric_name_1: VXLAN_EVPN_Fabric
#   fabric_type_1: VXLAN_EVPN
#   fabric_name_3: LAN_CLASSIC_Fabric
#   fabric_type_3: LAN_CLASSIC
#   leaf_1: 172.22.150.103
#   leaf_2: 172.22.150.104
#   nxos_username: admin
#   nxos_password: mypassword
################################################################################
# MERGED - SETUP - Delete fabrics
################################################################################
- name: MERGED - SETUP - Delete fabrics
  cisco.dcnm.dcnm_fabric:
    state: deleted
    config:
      - FABRIC_NAME: "{{ fabric_name_1 }}"
      - FABRIC_NAME: "{{ fabric_name_3 }}"
  register: result
- debug:
    var: result
################################################################################
# MERGED - TEST - Create fabric types that support adding switches.
#                 Use minimal fabric config
# DEPLOY is set to True for both fabrics but has no effect since the module
# skips config-save and config-deploy for empty fabrics.
################################################################################
# Expected result
# - All untested nvPairs removed for brevity.
# - Fabric global keys in DATA removed for brevity.
# ok: [ndfc1] => {
#     "result": {
#         "changed": true,
#         "diff": [
#             {
#                 "BGP_AS": 65535,
#                 "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                 "sequence_number": 1
#             },
#             {
#                 "BOOTSTRAP_ENABLE": false,
#                 "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                 "IS_READ_ONLY": false,
#                 "sequence_number": 2
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "create",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "merged"
#             },
#             {
#                 "action": "create",
#                 "check_mode": false,
#                 "sequence_number": 2,
#                 "state": "merged"
#             }
#         ],
#         "response": [
#             {
#                 "DATA": {
#                     "nvPairs": {
#                         "BGP_AS": "65535",
#                         "FABRIC_NAME": "VXLAN_EVPN_Fabric"
#                     }
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/VXLAN_EVPN_Fabric/Easy_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             },
#             {
#                 "DATA": {
#                     "nvPairs": {
#                         "BOOTSTRAP_ENABLE": "false",
#                         "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                         "IS_READ_ONLY": "false",
#                     }
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/LAN_CLASSIC_Fabric/LAN_Classic",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 2
#             }
#         ],
#         "result": [
#             {
#                 "changed": true,
#                 "sequence_number": 1,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 2,
#                 "success": true
#             }
#         ]
#     }
# }
################################################################################
- name: MERGED - TEST - Create fabric types that support adding switches.
  cisco.dcnm.dcnm_fabric:
    state: merged
    config:
      - FABRIC_NAME: "{{ fabric_name_1 }}"
        FABRIC_TYPE: "{{ fabric_type_1 }}"
        BGP_AS: 65535
        DEPLOY: true
      - FABRIC_NAME: "{{ fabric_name_3 }}"
        FABRIC_TYPE: "{{ fabric_type_3 }}"
        BOOTSTRAP_ENABLE: false
        IS_READ_ONLY: false
        DEPLOY: true
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.diff | length) == 2
      - result.diff[0].BGP_AS == 65535
      - result.diff[0].FABRIC_NAME == fabric_name_1
      - result.diff[0].sequence_number == 1
      - result.diff[1].FABRIC_NAME == fabric_name_3
      - result.diff[1].sequence_number == 2
      - result.diff[1].BOOTSTRAP_ENABLE == false
      - result.diff[1].IS_READ_ONLY == false
      - (result.metadata | length) == 2
      - result.metadata[0].action == "fabric_create"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "merged"
      - result.metadata[1].action == "fabric_create"
      - result.metadata[1].check_mode == False
      - result.metadata[1].sequence_number == 2
      - result.metadata[1].state == "merged"
      - (result.response | length) == 2
      - result.response[0].sequence_number == 1
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "POST"
      - result.response[0].RETURN_CODE == 200
      - result.response[1].sequence_number == 2
      - result.response[1].MESSAGE == "OK"
      - result.response[1].METHOD == "POST"
      - result.response[1].RETURN_CODE == 200
      - (result.result | length) == 2
      - result.result[0].changed == true
      - result.result[0].success == true
      - result.result[0].sequence_number == 1
      - result.result[1].changed == true
      - result.result[1].success == true
      - result.result[1].sequence_number == 2
################################################################################
# MERGED - TEST - Add one leaf switch to fabric_1 and fabric_3
################################################################################
- name: Merge leaf_1 into fabric_1
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ fabric_name_1 }}"
    state: merged
    config:
      - seed_ip: "{{ leaf_1 }}"
        auth_proto: MD5
        user_name: "{{ nxos_username}}"
        password: "{{ nxos_password }}"
        max_hops: 0
        role: leaf
        preserve_config: false
  register: result
- debug:
    var: result

- name: Merge leaf_2 into fabric_3
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ fabric_name_3 }}"
    state: merged
    config:
      - seed_ip: "{{ leaf_2 }}"
        auth_proto: MD5
        user_name: "{{ nxos_username}}"
        password: "{{ nxos_password }}"
        max_hops: 0
        role: leaf
        # preserve_config must be True for LAN_CLASSIC
        preserve_config: true
  register: result
- debug:
    var: result
################################################################################
# MERGED - TEST - Merge additional valid configs into fabric_1 and fabric_3
# DEPLOY is set to True for both fabrics
################################################################################
# Expected result
# - All untested nvPairs removed for brevity.
# - Fabric global keys in DATA removed for brevity.
# ok: [ndfc1] => {
#     "result": {
#         "changed": true,
#         "diff": [
#             {
#                 "ANYCAST_GW_MAC": "aaaa.bbbb.cccc",
#                 "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                 "REPLICATION_MODE": "Ingress",
#                 "sequence_number": 1
#             },
#             {
#                 "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                 "SUBINTERFACE_RANGE": "2-101",
#                 "sequence_number": 2
#             },
#             {
#                 "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                 "config_save": "OK",
#                 "sequence_number": 3
#             },
#             {
#                 "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                 "config_save": "OK",
#                 "sequence_number": 4
#             },
#             {
#                 "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                 "config_deploy": "OK",
#                 "sequence_number": 5
#             },
#             {
#                 "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                 "config_deploy": "OK",
#                 "sequence_number": 6
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "update",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "merged"
#             },
#             {
#                 "action": "update",
#                 "check_mode": false,
#                 "sequence_number": 2,
#                 "state": "merged"
#             },
#             {
#                 "action": "config_save",
#                 "check_mode": false,
#                 "sequence_number": 3,
#                 "state": "merged"
#             },
#             {
#                 "action": "config_save",
#                 "check_mode": false,
#                 "sequence_number": 4,
#                 "state": "merged"
#             },
#             {
#                 "action": "config_deploy",
#                 "check_mode": false,
#                 "sequence_number": 5,
#                 "state": "merged"
#             },
#             {
#                 "action": "config_deploy",
#                 "check_mode": false,
#                 "sequence_number": 6,
#                 "state": "merged"
#             },
#         ],
#         "response": [
#             {
#                 "DATA": {
#                     "nvPairs": {
#                         "ANYCAST_GW_MAC": "aaaa.bbbb.cccc",
#                         "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                         "REPLICATION_MODE": "Ingress",
#                         "UNDERLAY_IS_V6": "false",
#                     }
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "PUT",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/VXLAN_EVPN_Fabric/Easy_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             },
#             {
#                 "DATA": {
#                     "nvPairs": {
#                         "BOOTSTRAP_ENABLE": "false",
#                         "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                         "IS_READ_ONLY": "false",
#                         "SUBINTERFACE_RANGE": "2-101"
#                     }
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "PUT",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/LAN_CLASSIC_Fabric/LAN_Classic",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             },
#             {
#                 "DATA": {
#                     "status": "Config save is completed"
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/VXLAN_EVPN_Fabric/config-save",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 3
#             },
#             {
#                 "DATA": {
#                     "status": "Config save is completed"
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/LAN_CLASSIC_Fabric/config-save",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 4
#             },
#             {
#                 "DATA": {
#                     "status": "Configuration deployment completed."
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/VXLAN_EVPN_Fabric/config-deploy?forceShowRun=false",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 5
#             },
#             {
#                 "DATA": {
#                     "status": "Configuration deployment completed."
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/LAN_CLASSIC_Fabric/config-deploy?forceShowRun=false",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 6
#             }
#         ],
#         "result": [
#             {
#                 "changed": true,
#                 "sequence_number": 1,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 2,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 3,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 4,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 5,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 6,
#                 "success": true
#             }
#         ]
#     }
# }
################################################################################
- name: MERGED - TEST - Merge additional configs into fabric_1 and fabric_3
  cisco.dcnm.dcnm_fabric: &merge_fabric_1_3
    state: merged
    config:
      - FABRIC_NAME: "{{ fabric_name_1 }}"
        FABRIC_TYPE: "{{ fabric_type_1 }}"
        BGP_AS: 65535
        ANYCAST_GW_MAC: aaaabbbbcccc
        REPLICATION_MODE: Ingress
        UNDERLAY_IS_V6: false
        DEPLOY: true
      - FABRIC_NAME: "{{ fabric_name_3 }}"
        FABRIC_TYPE: "{{ fabric_type_3 }}"
        SUBINTERFACE_RANGE: 2-101
        DEPLOY: true
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.diff | length) == 6
      - result.diff[0].FABRIC_NAME == fabric_name_1
      - result.diff[0].ANYCAST_GW_MAC == "aaaa.bbbb.cccc"
      - result.diff[0].sequence_number == 1
      - result.diff[1].FABRIC_NAME == fabric_name_3
      - result.diff[1].SUBINTERFACE_RANGE == "2-101"
      - result.diff[1].sequence_number == 2
      - (result.metadata | length) == 6
      - result.metadata[0].action == "fabric_update"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "merged"
      - result.metadata[1].action == "fabric_update"
      - result.metadata[1].check_mode == False
      - result.metadata[1].sequence_number == 2
      - result.metadata[1].state == "merged"
      - result.metadata[2].action == "config_save"
      - result.metadata[2].check_mode == False
      - result.metadata[2].sequence_number == 3
      - result.metadata[2].state == "merged"
      - result.metadata[3].action == "config_save"
      - result.metadata[3].check_mode == False
      - result.metadata[3].sequence_number == 4
      - result.metadata[3].state == "merged"
      - result.metadata[4].action == "config_deploy"
      - result.metadata[4].check_mode == False
      - result.metadata[4].sequence_number == 5
      - result.metadata[4].state == "merged"
      - result.metadata[5].action == "config_deploy"
      - result.metadata[5].check_mode == False
      - result.metadata[5].sequence_number == 6
      - result.metadata[5].state == "merged"
      - (result.response | length) == 6
      - result.response[0].sequence_number == 1
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "PUT"
      - result.response[0].RETURN_CODE == 200
      - result.response[0].DATA.nvPairs.ANYCAST_GW_MAC == "aaaa.bbbb.cccc"
      - result.response[0].DATA.nvPairs.REPLICATION_MODE == "Ingress"
      - result.response[0].DATA.nvPairs.UNDERLAY_IS_V6 == "false"
      - result.response[0].DATA.nvPairs.FABRIC_NAME == fabric_name_1
      - result.response[1].sequence_number == 2
      - result.response[1].DATA.nvPairs.SUBINTERFACE_RANGE == "2-101"
      - result.response[1].DATA.nvPairs.FABRIC_NAME == fabric_name_3
      - result.response[1].MESSAGE == "OK"
      - result.response[1].METHOD == "PUT"
      - result.response[1].RETURN_CODE == 200
      - result.response[2].sequence_number == 3
      - result.response[2].DATA.status is match 'Config save is completed'
      - result.response[2].MESSAGE == "OK"
      - result.response[2].METHOD == "POST"
      - result.response[2].RETURN_CODE == 200
      - result.response[3].sequence_number == 4
      - result.response[3].DATA.status is match 'Config save is completed'
      - result.response[3].MESSAGE == "OK"
      - result.response[3].METHOD == "POST"
      - result.response[3].RETURN_CODE == 200
      - result.response[4].sequence_number == 5
      - result.response[4].DATA.status is match 'Configuration deployment completed.'
      - result.response[4].MESSAGE == "OK"
      - result.response[4].METHOD == "POST"
      - result.response[4].RETURN_CODE == 200
      - result.response[5].sequence_number == 6
      - result.response[5].DATA.status is match 'Configuration deployment completed.'
      - result.response[5].MESSAGE == "OK"
      - result.response[5].METHOD == "POST"
      - result.response[5].RETURN_CODE == 200
      - (result.result | length) == 6
      - result.result[0].changed == true
      - result.result[0].success == true
      - result.result[0].sequence_number == 1
      - result.result[1].changed == true
      - result.result[1].success == true
      - result.result[1].sequence_number == 2
      - result.result[2].changed == true
      - result.result[2].success == true
      - result.result[2].sequence_number == 3
      - result.result[3].changed == true
      - result.result[3].success == true
      - result.result[3].sequence_number == 4
      - result.result[4].changed == true
      - result.result[4].success == true
      - result.result[4].sequence_number == 5
      - result.result[5].changed == true
      - result.result[5].success == true
      - result.result[5].sequence_number == 6
################################################################################
# MERGED - TEST - Merge additional configs into fabric_1 and fabric_3 - idempotence
################################################################################
# Expected result
# - All untested nvPairs removed for brevity.
# - Fabric global keys in DATA removed for brevity.
# ok: [172.22.150.244] => {
#     "result": {
#         "changed": false,
#         "diff": [
#             {
#                 "sequence_number": 1
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "update",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "merged"
#             }
#         ],
#         "response": [
#             {
#                 "MESSAGE": "No fabrics to update for merged state.",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             }
#         ],
#         "result": [
#             {
#                 "changed": false,
#                 "sequence_number": 1,
#                 "success": true
#             }
#         ]
#     }
# }
################################################################################
- name: MERGED - TEST - Merge additional configs into fabric_1 and fabric_3 - idempotence
  cisco.dcnm.dcnm_fabric: *merge_fabric_1_3
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == false
      - result.failed == false
      - (result.diff | length) == 1
      - result.diff[0].sequence_number == 1
      - (result.metadata | length) == 1
      - result.metadata[0].action == "fabric_update"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "merged"
      - (result.response | length) == 1
      - result.response[0].sequence_number == 1
      - result.response[0].MESSAGE == "No fabrics to update for merged state."
      - result.response[0].RETURN_CODE == 200
      - (result.result | length) == 1
      - result.result[0].changed == false
      - result.result[0].success == true
      - result.result[0].sequence_number == 1
################################################################################
# MERGED - CLEANUP - Delete switches from all fabrics
################################################################################
- name: Delete switches from fabric_1
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ fabric_name_1 }}"
    state: deleted
    config:
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.response | length) == 1
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "DELETE"
      - result.response[0].RETURN_CODE == 200
- name: Delete switches from fabric_3
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ fabric_name_3 }}"
    state: deleted
    config:
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.response | length) == 1
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "DELETE"
      - result.response[0].RETURN_CODE == 200
################################################################################
# MERGED - CLEANUP - Delete the fabrics
################################################################################
# Expected result
# ok: [ndfc1] => {
#     "result": {
#         "changed": true,
#         "diff": [
#             {
#                 "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                 "sequence_number": 1
#             },
#             {
#                 "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                 "sequence_number": 3
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "delete",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "deleted"
#             },
#             {
#                 "action": "delete",
#                 "check_mode": false,
#                 "sequence_number": 2,
#                 "state": "deleted"
#             },
#         ],
#         "response": [
#             {
#                 "DATA": "Fabric 'VXLAN_EVPN_Fabric' is deleted successfully!",
#                 "MESSAGE": "OK",
#                 "METHOD": "DELETE",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/VXLAN_EVPN_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             },
#             {
#                 "DATA": "Fabric 'LAN_CLASSIC_Fabric' is deleted successfully!",
#                 "MESSAGE": "OK",
#                 "METHOD": "DELETE",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/LAN_CLASSIC_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 2
#             }
#         ],
#         "result": [
#             {
#                 "changed": true,
#                 "sequence_number": 1,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 2,
#                 "success": true
#             },
#         ]
#     }
# }
################################################################################
- name: MERGED - CLEANUP - Delete the fabrics
  cisco.dcnm.dcnm_fabric:
    state: deleted
    config:
      - FABRIC_NAME: "{{ fabric_name_1 }}"
      - FABRIC_NAME: "{{ fabric_name_3 }}"
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.diff | length) == 2
      - result.diff[0].FABRIC_NAME == fabric_name_1
      - result.diff[0].sequence_number == 1
      - result.diff[1].FABRIC_NAME == fabric_name_3
      - result.diff[1].sequence_number == 2
      - (result.metadata | length) == 2
      - result.metadata[0].action == "fabric_delete"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "deleted"
      - result.metadata[1].action == "fabric_delete"
      - result.metadata[1].check_mode == False
      - result.metadata[1].sequence_number == 2
      - result.metadata[1].state == "deleted"
      - (result.response | length) == 2
      - result.response[0].DATA is match '.*deleted successfully.*'
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "DELETE"
      - result.response[0].RETURN_CODE == 200
      - result.response[0].sequence_number == 1
      - result.response[1].DATA is match '.*deleted successfully.*'
      - result.response[1].MESSAGE == "OK"
      - result.response[1].METHOD == "DELETE"
      - result.response[1].RETURN_CODE == 200
      - result.response[1].sequence_number == 2
      - (result.result | length) == 2
      - result.result[0].changed == true
      - result.result[0].success == true
      - result.result[0].sequence_number == 1
      - result.result[1].changed == true
      - result.result[1].success == true
      - result.result[1].sequence_number == 2
