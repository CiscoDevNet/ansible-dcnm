################################################################################
# RUNTIME
################################################################################
# Recent run times (MM:SS.ms):
# 00:49.83
################################################################################
# DESCRIPTION - BASIC FABRIC DELETED STATE TEST
# 
# Test basic deletion of fabrics verify results.
# - Deletion of populated fabrics not tested here.
################################################################################
################################################################################
# STEPS
################################################################################
# SETUP
# 1. The following fabrics must be empty on the controller
#    See vars: section in cisco/dcnm/playbooks/dcnm_tests.yaml
#    - fabric_name_1
#    - fabric_type_1  # VXLAN_EVPN
#    - fabric_name_2
#    - fabric_type_2  # VXLAN_EVPN_MSD
#    - fabric_name_3
#    - fabric_type_3  # LAN_CLASSIC
#    - fabric_name_5
#    - fabric_type_5  # ISN
# 2. Delete fabrics under test, if they exist
#    - fabric_name_1
#    - fabric_name_2
#    - fabric_name_3
#    - fabric_name_5
# TEST
# 3. Create fabrics and verify result
#    - fabric_name_1
#    - fabric_name_2
#    - fabric_name_3
#    - fabric_name_5
# 4. Delete fabric_name_1 and fabric_name_2. Verify result
# 5. Delete fabric_name_3 and fabric_name_5. Verify result
# 6. Delete fabric_name_3 and fabric_name_5 again to verify idempotence.
# CLEANUP
# 7. No cleanup required
################################################################################
# REQUIREMENTS
################################################################################
# Inventory:
# ./playbooks/roles/dcnm_fabric/dcnm_hosts.yaml
# Playbook:
# ./playbooks/roles/dcnm_fabric/dcnm_tests.yaml
# Roles:
# ./tests/integration/targets/dcnm_fabric/tests/*.yaml
#
# Example vars:
#
# vars:
#   testcase: dcnm_fabric_deleted_basic
#   fabric_name_1: VXLAN_EVPN_Fabric
#   fabric_type_1: VXLAN_EVPN
#   fabric_name_2: VXLAN_EVPN_MSD_Fabric
#   fabric_type_2: VXLAN_EVPN_MSD
#   fabric_name_3: LAN_CLASSIC_Fabric
#   fabric_type_3: LAN_CLASSIC
#   fabric_name_5: ISN_Fabric
#   fabric_type_5: ISN
################################################################################
# SETUP
################################################################################
- name: DELETED - SETUP - Delete fabrics
  cisco.dcnm.dcnm_fabric:
    state: deleted
    config:
      - FABRIC_NAME: "{{ fabric_name_1 }}"
      - FABRIC_NAME: "{{ fabric_name_2 }}"
      - FABRIC_NAME: "{{ fabric_name_3 }}"
      - FABRIC_NAME: "{{ fabric_name_5 }}"
  register: result
- debug:
    var: result
################################################################################
# DELETED - TEST - Create all supported fabric types
################################################################################
# Expected result
# - All untested nvPairs removed for brevity.
# - Fabric global keys in DATA removed for brevity.
# ok: [ndfc1] => {
#     "result": {
#         "changed": true,
#         "diff": [
#             {
#                 "BGP_AS": "65535.65534",
#                 "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                 "sequence_number": 1
#             },
#             {
#                 "FABRIC_NAME": "VXLAN_EVPN_MSD_Fabric",
#                 "sequence_number": 2
#             },
#             {
#                 "BOOTSTRAP_ENABLE": false,
#                 "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                 "IS_READ_ONLY": false,
#                 "sequence_number": 3
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "create",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "merged"
#             },
#             {
#                 "action": "create",
#                 "check_mode": false,
#                 "sequence_number": 2,
#                 "state": "merged"
#             },
#             {
#                 "action": "create",
#                 "check_mode": false,
#                 "sequence_number": 3,
#                 "state": "merged"
#             }
#         ],
#         "response": [
#             {
#                 "DATA": {
#                     "nvPairs": {
#                         "BGP_AS": "65535.65534",
#                         "FABRIC_NAME": "VXLAN_EVPN_Fabric"
#                     }
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/VXLAN_EVPN_Fabric/Easy_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             },
#             {
#                 "DATA": {
#                     "nvPairs": {
#                         "FABRIC_NAME": "VXLAN_EVPN_MSD_Fabric",
#                     }
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/VXLAN_EVPN_MSD_Fabric/MSD_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 2
#             },
#             {
#                 "DATA": {
#                     "nvPairs": {
#                         "BOOTSTRAP_ENABLE": "false",
#                         "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                         "IS_READ_ONLY": "false",
#                     }
#                 },
#                 "MESSAGE": "OK",
#                 "METHOD": "POST",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/rest/control/fabrics/LAN_CLASSIC_Fabric/LAN_Classic",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 3
#             }
#         ],
#         "result": [
#             {
#                 "changed": true,
#                 "sequence_number": 1,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 2,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 3,
#                 "success": true
#             }
#         ]
#     }
# }
################################################################################
- name: DELETED - SETUP - Create all supported fabric types
  cisco.dcnm.dcnm_fabric:
    state: merged
    config:
      - FABRIC_NAME: "{{ fabric_name_1 }}"
        FABRIC_TYPE: "{{ fabric_type_1 }}"
        BGP_AS: "65535.65534"
        DEPLOY: true
      - FABRIC_NAME: "{{ fabric_name_2 }}"
        FABRIC_TYPE: "{{ fabric_type_2 }}"
        DEPLOY: true
      - FABRIC_NAME: "{{ fabric_name_3 }}"
        FABRIC_TYPE: "{{ fabric_type_3 }}"
        BOOTSTRAP_ENABLE: false
        IS_READ_ONLY: false
        DEPLOY: true
      - FABRIC_NAME: "{{ fabric_name_5 }}"
        FABRIC_TYPE: "{{ fabric_type_5 }}"
        BGP_AS: "65005"
        DEPLOY: true
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.diff | length) == 4
      - result.diff[0].BGP_AS == "65535.65534"
      - result.diff[0].FABRIC_NAME == fabric_name_1
      - result.diff[0].sequence_number == 1
      - result.diff[1].FABRIC_NAME == fabric_name_2
      - result.diff[1].sequence_number == 2
      - result.diff[2].FABRIC_NAME == fabric_name_3
      - result.diff[2].sequence_number == 3
      - result.diff[2].BOOTSTRAP_ENABLE == false
      - result.diff[2].IS_READ_ONLY == false
      - result.diff[3].BGP_AS == "65005"
      - result.diff[3].FABRIC_NAME == fabric_name_5
      - result.diff[3].sequence_number == 4
      - (result.metadata | length) == 4
      - result.metadata[0].action == "fabric_create"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "merged"
      - result.metadata[1].action == "fabric_create"
      - result.metadata[1].check_mode == False
      - result.metadata[1].sequence_number == 2
      - result.metadata[1].state == "merged"
      - result.metadata[2].action == "fabric_create"
      - result.metadata[2].check_mode == False
      - result.metadata[2].sequence_number == 3
      - result.metadata[2].state == "merged"
      - result.metadata[3].action == "fabric_create"
      - result.metadata[3].check_mode == False
      - result.metadata[3].sequence_number == 4
      - result.metadata[3].state == "merged"
      - (result.response | length) == 4
      - result.response[0].sequence_number == 1
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "POST"
      - result.response[0].RETURN_CODE == 200
      - result.response[1].sequence_number == 2
      - result.response[1].MESSAGE == "OK"
      - result.response[1].METHOD == "POST"
      - result.response[1].RETURN_CODE == 200
      - result.response[2].sequence_number == 3
      - result.response[2].MESSAGE == "OK"
      - result.response[2].METHOD == "POST"
      - result.response[2].RETURN_CODE == 200
      - result.response[3].sequence_number == 4
      - result.response[3].MESSAGE == "OK"
      - result.response[3].METHOD == "POST"
      - result.response[3].RETURN_CODE == 200
      - (result.result | length) == 4
      - result.result[0].changed == True
      - result.result[0].success == True
      - result.result[0].sequence_number == 1
      - result.result[1].changed == True
      - result.result[1].success == True
      - result.result[1].sequence_number == 2
      - result.result[2].changed == True
      - result.result[2].success == True
      - result.result[2].sequence_number == 3
      - result.result[3].changed == True
      - result.result[3].success == True
      - result.result[3].sequence_number == 4

###############################################################################################
# DELETED - TEST - Delete first two fabrics (fabric_name_1, fabric_name_2) and verify
###############################################################################################
# Expected result
# ok: [172.22.150.244] => {
#     "result": {
#         "changed": true,
#         "diff": [
#             {
#                 "FABRIC_NAME": "VXLAN_EVPN_Fabric",
#                 "sequence_number": 1
#             },
#             {
#                 "FABRIC_NAME": "VXLAN_EVPN_MSD_Fabric",
#                 "sequence_number": 2
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "fabric_delete",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "deleted"
#             },
#             {
#                 "action": "fabric_delete",
#                 "check_mode": false,
#                 "sequence_number": 2,
#                 "state": "deleted"
#             }
#         ],
#         "response": [
#             {
#                 "DATA": "Invalid JSON response: Fabric 'VXLAN_EVPN_Fabric' is deleted successfully!",
#                 "MESSAGE": "OK",
#                 "METHOD": "DELETE",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/VXLAN_EVPN_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             },
#             {
#                 "DATA": "Invalid JSON response: Fabric 'VXLAN_EVPN_MSD_Fabric' is deleted successfully!",
#                 "MESSAGE": "OK",
#                 "METHOD": "DELETE",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/VXLAN_EVPN_MSD_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 2
#             }
#         ],
#         "result": [
#             {
#                 "changed": true,
#                 "sequence_number": 1,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 2,
#                 "success": true
#             }
#         ]
#     }
# }
###############################################################################################
- name: DELETED - TEST - Delete first two fabrics (fabric_name_1, fabric_name_2) and verify
  cisco.dcnm.dcnm_fabric:
    state: deleted
    config:
      - FABRIC_NAME: "{{ fabric_name_1 }}"
      - FABRIC_NAME: "{{ fabric_name_2 }}"
  register: result
- debug:
    var: result
- set_fact:
    TEST_PHRASE: "is deleted successfully"
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.diff | length) == 2
      - result.diff[0].FABRIC_NAME == fabric_name_1
      - result.diff[1].FABRIC_NAME == fabric_name_2
      - result.diff[0].sequence_number == 1
      - result.diff[1].sequence_number == 2
      - (result.metadata | length) == 2
      - result.metadata[0].action == "fabric_delete"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "deleted"
      - result.metadata[1].action == "fabric_delete"
      - result.metadata[1].check_mode == False
      - result.metadata[1].sequence_number == 2
      - result.metadata[1].state == "deleted"
      - (result.response | length) == 2
      - TEST_PHRASE in result.response[0].DATA
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "DELETE"
      - result.response[0].RETURN_CODE == 200
      - result.response[0].sequence_number == 1
      - TEST_PHRASE in result.response[1].DATA
      - result.response[1].MESSAGE == "OK"
      - result.response[1].METHOD == "DELETE"
      - result.response[1].RETURN_CODE == 200
      - result.response[1].sequence_number == 2
      - (result.result | length) == 2
      - result.result[0].changed == true
      - result.result[0].success == true
      - result.result[0].sequence_number == 1
      - result.result[1].changed == true
      - result.result[1].success == true
      - result.result[1].sequence_number == 2
################################################################################
# DELETED - TEST - Delete remaining fabrics (fabric_name_3, fabric_name_5) and verify
################################################################################
# Expected result
# ok: [172.22.150.244] => {
#     "result": {
#         "changed": true,
#         "diff": [
#             {
#                 "FABRIC_NAME": "LAN_CLASSIC_Fabric",
#                 "sequence_number": 1
#             },
#             {
#                 "FABRIC_NAME": "ISN_Fabric",
#                 "sequence_number": 2
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "fabric_delete",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "deleted"
#             },
#             {
#                 "action": "fabric_delete",
#                 "check_mode": false,
#                 "sequence_number": 2,
#                 "state": "deleted"
#             }
#         ],
#         "response": [
#             {
#                 "DATA": "Invalid JSON response: Fabric 'LAN_CLASSIC_Fabric' is deleted successfully!",
#                 "MESSAGE": "OK",
#                 "METHOD": "DELETE",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/LAN_CLASSIC_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             },
#             {
#                 "DATA": "Invalid JSON response: Fabric 'ISN_Fabric' is deleted successfully!",
#                 "MESSAGE": "OK",
#                 "METHOD": "DELETE",
#                 "REQUEST_PATH": "https://172.22.150.244:443/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/ISN_Fabric",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 2
#             }
#         ],
#         "result": [
#             {
#                 "changed": true,
#                 "sequence_number": 1,
#                 "success": true
#             },
#             {
#                 "changed": true,
#                 "sequence_number": 2,
#                 "success": true
#             }
#         ]
#     }
# }
################################################################################
- name: DELETED - TEST - Delete remaining fabrics (fabric_name_3, fabric_name_5) and verify
  cisco.dcnm.dcnm_fabric: &fabric_deleted
    state: deleted
    config:
      - FABRIC_NAME: "{{ fabric_name_3 }}"
      - FABRIC_NAME: "{{ fabric_name_5 }}"
  register: result
- debug:
    var: result
- set_fact:
    TEST_PHRASE: "is deleted successfully"
- assert:
    that:
      - result.changed == true
      - result.failed == false
      - (result.diff | length) == 2
      - result.diff[0].FABRIC_NAME == fabric_name_3
      - result.diff[0].sequence_number == 1
      - result.diff[1].FABRIC_NAME == fabric_name_5
      - result.diff[1].sequence_number == 2
      - (result.metadata | length) == 2
      - result.metadata[0].action == "fabric_delete"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "deleted"
      - result.metadata[1].action == "fabric_delete"
      - result.metadata[1].check_mode == False
      - result.metadata[1].sequence_number == 2
      - result.metadata[1].state == "deleted"
      - (result.response | length) == 2
      - TEST_PHRASE in result.response[0].DATA
      - result.response[0].MESSAGE == "OK"
      - result.response[0].METHOD == "DELETE"
      - result.response[0].RETURN_CODE == 200
      - result.response[0].sequence_number == 1
      - TEST_PHRASE in result.response[1].DATA
      - result.response[1].MESSAGE == "OK"
      - result.response[1].METHOD == "DELETE"
      - result.response[1].RETURN_CODE == 200
      - result.response[1].sequence_number == 2
      - (result.result | length) == 2
      - result.result[0].changed == true
      - result.result[0].success == true
      - result.result[0].sequence_number == 1
      - result.result[1].changed == true
      - result.result[1].success == true
      - result.result[1].sequence_number == 2
################################################################################
# DELETED - TEST - Delete remaining fabrics (fabric_name_3, fabric_name_5) idempotence
################################################################################
# Expected result
# ok: [172.22.150.244] => {
#     "result": {
#         "changed": false,
#         "diff": [
#             {
#                 "sequence_number": 1
#             }
#         ],
#         "failed": false,
#         "metadata": [
#             {
#                 "action": "fabric_delete",
#                 "check_mode": false,
#                 "sequence_number": 1,
#                 "state": "deleted"
#             }
#         ],
#         "response": [
#             {
#                 "MESSAGE": "No fabrics to delete",
#                 "RETURN_CODE": 200,
#                 "sequence_number": 1
#             }
#         ],
#         "result": [
#             {
#                 "changed": false,
#                 "sequence_number": 1,
#                 "success": true
#             }
#         ]
#     }
# }
################################################################################
- name: DELETED - TEST - Delete remaining fabrics (fabric_name_3, fabric_name_5) idempotence
  cisco.dcnm.dcnm_fabric: *fabric_deleted
  register: result
- debug:
    var: result
- assert:
    that:
      - result.changed == false
      - result.failed == false
      - (result.diff | length) == 1
      - result.diff[0].sequence_number == 1
      - (result.metadata | length) == 1
      - result.metadata[0].action == "fabric_delete"
      - result.metadata[0].check_mode == False
      - result.metadata[0].sequence_number == 1
      - result.metadata[0].state == "deleted"
      - (result.response | length) == 1
      - result.response[0].MESSAGE == "No fabrics to delete"
      - result.response[0].RETURN_CODE == 200
      - result.response[0].sequence_number == 1
      - result.result[0].changed == false
      - result.result[0].success == true
      - result.result[0].sequence_number == 1
