##############################################
##               SETUP                      ##
##############################################

- name: Put the fabric to default state
  cisco.dcnm.dcnm_policy:
    fabric: "{{ ansible_it_fabric }}" 
    state: deleted                     # only choose form [merged, deleted, query]
    config: 
      - name: template_inuse_1  # name is mandatory
      - name: template_inuse_2  # name is mandatory
      - name: my_feature_telemetry
      - switch:
          - ip: "{{ ansible_switch1 }}"
  register: result  
  tags: sanity

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'  
  loop: '{{ result.response }}'
  tags: sanity

- name: Initialize - Delete the templates
  cisco.dcnm.dcnm_template: 
    state: deleted       # only choose form [merged, deleted, query]
    config:
      - name: template_101
      - name: template_102
      - name: template_103
      - name: template_104
      - name: template_105
      - name: template_inuse_1
      - name: template_inuse_2
      - name: my_feature_telemetry
  register: result
  tags: sanity

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'  
  loop: '{{ result.response }}'
  tags: sanity

- block:

##############################################
##                MERGE                     ##
##############################################

    - name: Create templates to be used by policies below
      cisco.dcnm.dcnm_template: 
        state: merged        # only choose form [merged, deleted, query]
        config:
          - name: template_inuse_1
            description: "template_inuse_1"
            tags: "internal policy template_inuse_1"
            content: |
              telemetry
                certificate /bootflash/telegraf.crt telegraf
                destination-profile
                  use-vrf management
                destination-group 9
                  ip address 10.195.225.176 port 9000 protocol gRPC encoding GPB
                sensor-group 9
                  data-source DME
                  path sys/ch depth unbounded
                subscription 9
                  dst-grp 9
                  snsr-grp 9 sample-interval 9000

          - name: template_inuse_2
            description: "template_inuse_2"
            tags: "internal policy template_inuse_2"
            content: |
              telemetry
                certificate /bootflash/telegraf.crt telegraf
                destination-profile
                  use-vrf management
                destination-group 8
                  ip address 10.195.224.176 port 8000 protocol gRPC encoding GPB
                sensor-group 8
                  data-source DME
                  path sys/ch depth unbounded
                subscription 8
                  dst-grp 8
                  snsr-grp 8 sample-interval 8000
      tags: sanity

# Policy IT cases depend on telemetry feature being enabled on the switches. So create a policy for
# deploying the telemetry feature on the switches before starting the tests

    - name: Create template for telemetry feature
      cisco.dcnm.dcnm_template:
        state: merged        # only choose form [merged, deleted, query]
        config:
          - name: my_feature_telemetry
            tags: "telemetry"
            description: "internal template for enabling telemetry feature"
            content: |
              ##
              ##template content

              feature telemetry

              ##
      register: result
      tags: sanity

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 1'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
      tags: sanity

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Template Created" in item["DATA"]["status"]'
      loop: '{{ result.response }}'
      tags: sanity

# Create the policy to deploy telemetry feature on the switches
    - name: Create telemetry policy
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        config:
          - name: my_feature_telemetry  # This must be a valid template name
            create_additional_policy: false  # Do not create a policy if it already exists
            priority: 101

          - switch:
              - ip: "{{ ansible_switch1 }}"
        deploy: true
        state: merged
      register: result
      tags: sanity

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 1'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 1'
      tags: sanity

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Success" in item["DATA"]["successList"][0]["status"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx
      tags: sanity

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 1'
      when: (my_idx == (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx
      tags: sanity

    - name: Create and deploy the policies using created templates
      cisco.dcnm.dcnm_policy: 
        fabric: "{{ ansible_it_fabric }}" 
        config: 
          - name: template_inuse_1  # This must be a valid template name
            create_additional_policy: false  # Do not create a policy if it already exists
            priority: 101 

          - name: template_inuse_2  # This must be a valid template name
            create_additional_policy: false  # Do not create a policy if it already exists
            description: 102 - No piority given

          - switch:
              - ip: "{{ ansible_switch1 }}"
        deploy: true
        state: merged
      register: result
      tags: sanity

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 2'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 2'
      tags: sanity

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Success" in item["DATA"]["successList"][0]["status"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))   
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx
      tags: sanity

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 2'
      when: (my_idx == (result["diff"][0]["merged"] | length))   
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx
