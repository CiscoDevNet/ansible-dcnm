##############################################
##            REQUIRED VARS                 ##
##############################################
# test_fabric
# A VXLAN_EVPN fabric
#
# switch_1
# A border switch
#
# switch_2
# A border switch
#
# interface_1
# Ethernet interface on switch_1 and switch_2
# used to test VRF LITE configuration.

##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    rest_path: "/rest/control/fabrics/{{ test_fabric }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ test_fabric }}"
  when: controller_version >= "12"

- name: SETUP.1 - QUERY - Verify if fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result

- assert:
    that:
    - 'result.response.DATA != None'

- name: SETUP.2 - QUERY - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted
  register: result_setup_2

- name: SETUP.2a - QUERY - Wait 40 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 40
  when: result_setup_2.changed == true

- name: SETUP.4 - QUERY - Create, Attach and Deploy new VRF - VLAN
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
      deploy: true
  register: result

- name: SETUP.5 - Query fabric state until vrfStatus transitions to DEPLOYED state
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- name: debug result var SETUP.4
  debug:
    var: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

# ###############################################
# ###                QUERY                     ##
# ###############################################

- name: TEST.1 - QUERY - Query the VRF
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
    config:
      - vrf_name: ansible-vrf-int1
        vrf_id: 9008011
        vrf_template: Default_VRF_Universal
        vrf_extension_template: Default_VRF_Extension_Universal
        vlan_id: 500
        attach:
          - ip_address: "{{ switch_1 }}"
          - ip_address: "{{ switch_2 }}"
        deploy: true
  register: result_1

- name: debug result_1 TEST.1
  debug:
    var: result_1

- assert:
    that:
    - 'result_1.changed == false'
    - 'result_1.response[0].parent.vrfName == "ansible-vrf-int1"'
    - 'result_1.response[0].parent.vrfId == 9008011'
    - 'result_1.response[0].parent.vrfStatus == "DEPLOYED"'
    - 'result_1.response[0].attach[0].switchDetailsList[0].islanAttached == true'
    - 'result_1.response[0].attach[0].switchDetailsList[0].lanAttachedState == "DEPLOYED"'
    - 'result_1.response[0].attach[0].switchDetailsList[0].vlan == 500'
    - 'result_1.response[0].attach[1].switchDetailsList[0].islanAttached == true'
    - 'result_1.response[0].attach[1].switchDetailsList[0].lanAttachedState == "DEPLOYED"'
    - 'result_1.response[0].attach[1].switchDetailsList[0].vlan == 500'

- name: TEST.2 - QUERY - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted
  register: result_2

- name: debug result_2 TEST.2
  debug:
    var: result_2

- assert:
    that:
    - 'result_2.changed == true'
    - 'result_2.response[0].RETURN_CODE == 200'
    - 'result_2.response[1].RETURN_CODE == 200'
    - 'result_2.response[1].MESSAGE == "OK"'
    - 'result_2.response[2].RETURN_CODE == 200'
    - 'result_2.response[2].METHOD == "DELETE"'
    - '(result_2.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result_2.response[0].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result_2.diff[0].attach[0].deploy == false'
    - 'result_2.diff[0].attach[1].deploy == false'
    - 'result_2.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.2b - QUERY - Wait 40 seconds for controller and switch to sync
  wait_for:
    timeout: 40

- name: TEST.3 - QUERY - Create, Attach, Deploy VLAN+VRF
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 1500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
      deploy: true
  register: result_3

- name: debug result_3 TEST.3
  debug:
    var: result_3

- name: TEST.4 - Query fabric state until vrfStatus transitions to DEPLOYED state
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- name: TEST.5 - QUERY - Create, Attach, Deploy VRF+LITE EXTENSION 1x switch
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 1500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int2 # peer_vrf is mandatory
            interface: "{{ interface_1 }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # dot1q can be got from dcnm
      deploy: true
  register: result_4

- name: debug result_4 TEST.5 (before query)
  debug:
    var: result_4

- name: TEST.6 - QUERY - Query for vrfStatus transition to DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- name: debug result_4 TEST.5 (after query)
  debug:
    var: result_4

- assert:
    that:
    - 'result_3.changed == true'
    - 'result_3.response[0].RETURN_CODE == 200'
    - 'result_3.response[1].RETURN_CODE == 200'
    - 'result_3.response[2].RETURN_CODE == 200'
    - '(result_3.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result_3.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result_3.diff[0].attach[0].deploy == true'
    - '"{{ switch_1 }}" in result_3.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result_3.diff[0].attach[1].ip_address'

- assert:
    that:
    - 'result_4.changed == true'
    - 'result_4.response[0].RETURN_CODE == 200'
    - 'result_4.response[1].RETURN_CODE == 200'
    - '(result_4.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - 'result_4.diff[0].attach[0].deploy == true'
    - '"{{ switch_2 }}" in result_4.diff[0].attach[0].ip_address'
    - 'result_4.diff[0].vrf_name == "ansible-vrf-int2"'

- name: TEST.7 - QUERY - Query the VRF+LITE EXTENSION in one switch
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
    config:
    - vrf_name: ansible-vrf-int2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 1500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int2 # peer_vrf is mandatory
            interface: "{{ interface_1 }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # dot1q can be got from dcnm
      deploy: true
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response[0].parent.vrfName == "ansible-vrf-int2"'
    - 'result.response[0].parent.vrfId == 9008012'
    - 'result.response[0].parent.vrfStatus == "DEPLOYED"'
    - 'result.response[0].attach[0].switchDetailsList[0].islanAttached == true'
    - 'result.response[0].attach[0].switchDetailsList[0].lanAttachedState == "DEPLOYED"'
    - 'result.response[0].attach[0].switchDetailsList[0].vlan == 1500'
    - 'result.response[0].attach[1].switchDetailsList[0].islanAttached == true'
    - 'result.response[0].attach[1].switchDetailsList[0].lanAttachedState == "DEPLOYED"'
    - 'result.response[0].attach[1].switchDetailsList[0].vlan == 1500'

- name: TEST.8 - QUERY - Query without the config element
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response[0].parent.vrfName == "ansible-vrf-int2"'
    - 'result.response[0].parent.vrfId == 9008012'
    - 'result.response[0].parent.vrfStatus == "DEPLOYED"'
    - 'result.response[0].attach[0].switchDetailsList[0].islanAttached == true'
    - 'result.response[0].attach[0].switchDetailsList[0].lanAttachedState == "DEPLOYED"'
    - 'result.response[0].attach[0].switchDetailsList[0].vlan == 1500'
    - 'result.response[0].attach[1].switchDetailsList[0].islanAttached == true'
    - 'result.response[0].attach[1].switchDetailsList[0].lanAttachedState == "DEPLOYED"'
    - 'result.response[0].attach[1].switchDetailsList[0].vlan == 1500'

- name: TEST.9 - QUERY - Query the non available VRF
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
    config:
      - vrf_name: ansible-vrf-int1
        vrf_id: 9008011
        vrf_template: Default_VRF_Universal
        vrf_extension_template: Default_VRF_Extension_Universal
        vlan_id: 500
        attach:
          - ip_address: "{{ switch_1 }}"
          - ip_address: "{{ switch_2 }}"
        deploy: true
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

###############################################
###                 CLEAN-UP                 ##
###############################################

- name: CLEANUP.1 - QUERY - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted
