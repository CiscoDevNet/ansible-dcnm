##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    rest_path: "/rest/control/fabrics/{{ test_fabric }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ test_fabric }}"
  when: controller_version >= "12"

- name: OVERRIDDEN - Verify if fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result

- assert:
    that:
    - 'result.response.DATA != None'

- name: OVERRIDDEN - Clean up any existing vrfs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted

- name: OVERRIDDEN - Create, Attach and Deploy new VRF - VLAN Provided by the User
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
      deploy: true
  register: result

- name: Query fabric state until vrfStatus transitions to DEPLOYED state
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ ansible_switch2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

###############################################
###              OVERRIDDEN                  ##
###############################################

- name: OVERRIDDEN - Update existing VRF using overridden - delete and create
  cisco.dcnm.dcnm_vrf: &conf
    fabric: "{{ test_fabric }}"
    state: overridden
    config:
    - vrf_name: ansible-vrf-int2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
      deploy: true
  register: result

- name: Query fabric state until vrfStatus transitions to DEPLOYED state
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - 'result.response[4].RETURN_CODE == 200'
    - 'result.response[5].RETURN_CODE == 200'
    - '(result.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[0].DATA|dict2items)[1].value == "SUCCESS"'
    - '(result.response[4].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[4].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - 'result.diff[0].vrf_name == "ansible-vrf-int2"'
    - 'result.diff[1].attach[0].deploy == false'
    - 'result.diff[1].attach[1].deploy == false'
    - 'result.diff[1].vrf_name == "ansible-vrf-int1"'

- name: OVERRIDDEN - conf - Idempotence
  cisco.dcnm.dcnm_vrf: *conf
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: OVERRIDDEN - Clean up any existing vrfs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted

- name: OVERRIDDEN - Create, Attach and Deploy new VRF - VRF/VRF LITE EXTENSION Provided by the User in one switch
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 1500
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int2 # optional
            interface: "{{ ansible_int1 }}" # mandatory
            ipv4_addr: 10.33.0.2/24 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # dot1q can be got from dcnm
      deploy: true
  register: result

- name: Query fabric state until vrfStatus transitions to DEPLOYED state
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ ansible_switch1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ ansible_switch2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int2"'

- name: OVERRIDDEN - Update existing VRF LITE using overridden - VRF stays Whereas Ext is modified/overridden
  cisco.dcnm.dcnm_vrf: &conf1
    fabric: "{{ test_fabric }}"
    state: overridden
    config:
    - vrf_name: ansible-vrf-int2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 1500
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int2 # optional
            interface: "{{ ansible_int1 }}" # mandatory
            ipv4_addr: 10.33.0.6/24 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:10/64 # optional
            neighbor_ipv6: 2010::10:34:0:7 # optional
            dot1q: 21 # dot1q can be got from dcnm
      deploy: true
  register: result

- name: Query fabric state until vrfStatus transitions to DEPLOYED state
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - '(result.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].vrf_name == "ansible-vrf-int2"'

- name: OVERRIDDEN - conf - Idempotence
  cisco.dcnm.dcnm_vrf: *conf1
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: OVERRIDDEN - Update existing VRF LITE using overridden - VRF modified and Ext is modified - Old ones deleted
  cisco.dcnm.dcnm_vrf: &conf2
    fabric: "{{ test_fabric }}"
    state: overridden
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ ansible_switch1 }}"
      - ip_address: "{{ ansible_switch2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ ansible_int1 }}" # mandatory
            ipv4_addr: 10.33.0.3/24 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:1/64 # optional
            neighbor_ipv6: 2010::10:34:0:2 # optional
            dot1q: 31 # dot1q can be got from dcnm
      deploy: true
  register: result

- name: Query fabric state until vrfStatus transitions to DEPLOYED state
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[3].RETURN_CODE == 200'
    - 'result.response[4].RETURN_CODE == 200'
    - 'result.response[5].RETURN_CODE == 200'
    - '(result.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[0].DATA|dict2items)[1].value == "SUCCESS"'
    - '(result.response[4].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[4].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.response[2].METHOD == "DELETE"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'
    - 'result.diff[1].attach[0].deploy == false'
    - 'result.diff[1].attach[1].deploy == false'
    - 'result.diff[1].vrf_name == "ansible-vrf-int2"'

- name: OVERRIDDEN - conf - Idempotence
  cisco.dcnm.dcnm_vrf: *conf2
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

##############################################
##                 CLEAN-UP                 ##
##############################################

- name: OVERRIDDEN - Clean up any existing vrfs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted
