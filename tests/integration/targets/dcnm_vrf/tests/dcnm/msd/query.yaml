##############################################
##            REQUIRED VARS                 ##
##############################################
# parent_fabric
# A Parent MSD VXLAN_EVPN fabric
#
# child_fabric
# A Child MSD VXLAN_EVPN fabric associated with parent_fabric
#
# child_switch_1
# - A switch in the child MSD fabric
# - VRF-lite capable switch
#
# child_switch_2  
# - A switch in the child MSD fabric
# - VRF-lite capable switch
#
# interface_2a
# - Ethernet interface on child_switch_2
# - Used to test VRF LITE configuration in MSD environment
##############################################

##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    rest_path: "/rest/control/fabrics/{{ parent_fabric }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ parent_fabric }}"
  when: controller_version >= "12"

- name: SETUP.0 - MSD QUERY - [with_items] print vars
  ansible.builtin.debug:
    var: item
  with_items:
     - "parent_fabric : {{ parent_fabric }}"
     - "child_fabric : {{ child_fabric }}"
     - "child_switch_1 : {{ child_switch_1 }}"
     - "child_switch_2 : {{ child_switch_2 }}"
     - "interface_2a : {{ interface_2a }}"

- name: SETUP.1 - MSD QUERY - [dcnm_rest.GET] Verify parent fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result

- assert:
    that:
    - result.response.DATA != None

- name: SETUP.2 - MSD QUERY - [deleted] Clean slate - delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: deleted
  register: result_setup_2

- name: SETUP.2a - MSD QUERY - [wait_for] Wait 60 seconds for controller and switch to sync
  wait_for:
    timeout: 60
  when: result_setup_2.changed == true

- name: SETUP.3 - MSD QUERY - [merged] Create VRFs for query testing
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-msd-query-1
      vrf_id: 9008101
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 2101
      vrf_description: "Query test VRF 1"
      vrf_int_mtu: 9000
      max_bgp_paths: 2
      max_ibgp_paths: 4
      child_fabric_config:
      - fabric: "{{ child_fabric }}"
        adv_default_routes: true
        adv_host_routes: false
        static_default_route: true
        l3vni_wo_vlan: false
      attach:
      - ip_address: "{{ child_switch_1 }}"
      deploy: true
    - vrf_name: ansible-msd-query-2
      vrf_id: 9008102
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 2102
      vrf_description: "Query test VRF 2 with advanced config"
      vrf_int_mtu: 9216
      max_bgp_paths: 1
      max_ibgp_paths: 2
      child_fabric_config:
      - fabric: "{{ child_fabric }}"
        adv_default_routes: false
        adv_host_routes: true
        static_default_route: false
        l3vni_wo_vlan: true
        bgp_password: "QUERYPASS123"
        bgp_passwd_encrypt: 7
      attach:
      - ip_address: "{{ child_switch_1 }}"
      - ip_address: "{{ child_switch_2 }}"
      deploy: true
    - vrf_name: ansible-msd-query-lite
      vrf_id: 9008103
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 2103
      vrf_description: "Query test VRF with VRF-Lite"
      child_fabric_config:
      - fabric: "{{ child_fabric }}"
        adv_default_routes: true
        adv_host_routes: false
        static_default_route: true
      attach:
      - ip_address: "{{ child_switch_2 }}"
        vrf_lite:
        - interface: "{{ interface_2a }}"
          ipv4_addr: 10.10.1.2/30
          neighbor_ipv4: 10.10.1.1
          peer_vrf: external_query_vrf
          dot1q: 500
      deploy: true
    - vrf_name: ansible-msd-query-parent-only
      vrf_id: 9008104
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 2104
      vrf_description: "Query test VRF Parent-only"
      # No child_fabric_config specified
      attach:
      - ip_address: "{{ child_switch_1 }}"
      deploy: true
  register: result_setup_3

- name: SETUP.3a - MSD QUERY - [debug] print setup result
  ansible.builtin.debug:
    var: result_setup_3

###############################################
###            MSD QUERY TESTS              ##
###############################################

- name: TEST.1 - MSD QUERY - [query] Query all VRFs (no config specified)
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
  register: result_1

- name: TEST.1a - MSD QUERY - [debug] print result_1 (all VRFs)
  ansible.builtin.debug:
    var: result_1

- assert:
    that:
    - result_1.changed == false
    - result_1.workflow == "Multisite Parent without Child Fabric Processing"
    - result_1.response|length == 4  # Should return all 4 VRFs created
    # Verify VRF structure
    - result_1.response[0].parent is defined
    - result_1.response[0].attach is defined
    # Check VRF names are present
    - result_1.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-1')|list|length == 1
    - result_1.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-2')|list|length == 1
    - result_1.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-lite')|list|length == 1
    - result_1.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-parent-only')|list|length == 1

- name: TEST.2 - MSD QUERY - [query] Query specific VRF by name
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-query-1
  register: result_2

- name: TEST.2a - MSD QUERY - [debug] print result_2 (specific VRF)
  ansible.builtin.debug:
    var: result_2

- assert:
    that:
    - result_2.changed == false
    - result_2.workflow == "Multisite Parent without Child Fabric Processing"
    - result_2.response|length == 1  # Should return only 1 VRF
    - result_2.response[0].parent.vrfName == "ansible-msd-query-1"
    - result_2.response[0].parent.vrfId == 9008101
    - result_2.response[0].parent.fabric == parent_fabric
    - result_2.response[0].parent.vrfTemplate == "Default_VRF_Universal"
    - result_2.response[0].parent.vrfExtensionTemplate == "Default_VRF_Extension_Universal"
    # Verify attach information
    - result_2.response[0].attach|length >= 1
    - result_2.response[0].attach[0].vrfName == "ansible-msd-query-1"

- name: TEST.3 - MSD QUERY - [query] Query multiple specific VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-query-1
    - vrf_name: ansible-msd-query-lite
  register: result_3

- name: TEST.3a - MSD QUERY - [debug] print result_3 (multiple VRFs)
  ansible.builtin.debug:
    var: result_3

- assert:
    that:
    - result_3.changed == false
    - result_3.workflow == "Multisite Parent without Child Fabric Processing"
    - result_3.response|length == 2  # Should return 2 VRFs
    # Verify both VRFs are present
    - result_3.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-1')|list|length == 1
    - result_3.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-lite')|list|length == 1

- name: TEST.4 - MSD QUERY - [query] Query non-existent VRF
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-nonexistent
  register: result_4

- name: TEST.4a - MSD QUERY - [debug] print result_4 (non-existent VRF)
  ansible.builtin.debug:
    var: result_4

- assert:
    that:
    - result_4.changed == false
    - result_4.response|length == 0  # Should return no VRFs

- name: TEST.5 - MSD QUERY - [query] Query VRF with VRF-Lite configuration
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-query-lite
  register: result_5

- name: TEST.5a - MSD QUERY - [debug] print result_5 (VRF-Lite VRF)
  ansible.builtin.debug:
    var: result_5

- assert:
    that:
    - result_5.changed == false
    - result_5.response|length == 1
    - result_5.response[0].parent.vrfName == "ansible-msd-query-lite"
    # Verify VRF-Lite attachment information is present
    - result_5.response[0].attach|length >= 1
    # Note: VRF-Lite specific details would be in the attach section

- name: TEST.6 - MSD QUERY - [query] Verify VRF template configurations in query response
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-query-2
  register: result_6

- name: TEST.6a - MSD QUERY - [debug] print result_6 (template config verification)
  ansible.builtin.debug:
    var: result_6

- assert:
    that:
    - result_6.changed == false
    - result_6.response|length == 1
    - result_6.response[0].parent.vrfName == "ansible-msd-query-2"
    - result_6.response[0].parent.vrfId == 9008102
    # Verify template configuration is present
    - result_6.response[0].parent.vrfTemplateConfig is defined
    - result_6.response[0].parent.vrfTemplateConfig is string
    - "'9008102' in result_6.response[0].parent.vrfTemplateConfig"
    - "'ansible-msd-query-2' in result_6.response[0].parent.vrfTemplateConfig"


- name: TEST.7 - MSD QUERY - [query] Query mixed VRFs (existing and non-existing)
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-query-1        # Exists
    - vrf_name: ansible-msd-nonexistent-1  # Doesn't exist
    - vrf_name: ansible-msd-query-2        # Exists
    - vrf_name: ansible-msd-nonexistent-2  # Doesn't exist
  register: result_7

- name: TEST.7a - MSD QUERY - [debug] print result_7 (mixed query)
  ansible.builtin.debug:
    var: result_7

- assert:
    that:
    - result_7.changed == false
    - result_7.response|length == 2  # Should return only existing VRFs
    # Verify only existing VRFs are returned
    - result_7.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-1')|list|length == 1
    - result_7.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-2')|list|length == 1

- name: TEST.8 - MSD QUERY - [query] Query Parent-only VRF (no Child config)
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-query-parent-only
  register: result_8

- name: TEST.8a - MSD QUERY - [debug] print result_8 (Parent-only VRF)
  ansible.builtin.debug:
    var: result_8

- assert:
    that:
    - result_8.changed == false
    - result_8.response|length == 1
    - result_8.response[0].parent.vrfName == "ansible-msd-query-parent-only"
    - result_8.response[0].parent.vrfId == 9008104
    - result_8.response[0].parent.fabric == parent_fabric

- name: TEST.9 - MSD QUERY - [query] Performance test - query large number of VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
    config:
    - vrf_name: ansible-msd-query-1
    - vrf_name: ansible-msd-query-2
    - vrf_name: ansible-msd-query-lite
    - vrf_name: ansible-msd-query-parent-only
    # Including non-existent VRFs to test filtering
    - vrf_name: ansible-msd-fake-1
    - vrf_name: ansible-msd-fake-2
    - vrf_name: ansible-msd-fake-3
  register: result_9

- name: TEST.9a - MSD QUERY - [debug] print result_9 (performance test)
  ansible.builtin.debug:
    var: result_9

- assert:
    that:
    - result_9.changed == false
    - result_9.response|length == 4  # Should return only the 4 existing VRFs
    # All existing VRFs should be present
    - result_9.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-1')|list|length == 1
    - result_9.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-2')|list|length == 1
    - result_9.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-lite')|list|length == 1
    - result_9.response|selectattr('parent.vrfName', 'equalto', 'ansible-msd-query-parent-only')|list|length == 1

###############################################
###              CLEANUP                    ##
###############################################

- name: CLEANUP.1 - MSD QUERY - [deleted] Delete all VRFs from Parent MSD fabric
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: deleted
  register: result_cleanup_1

- name: CLEANUP.1a - MSD QUERY - [debug] print cleanup result
  ansible.builtin.debug:
    var: result_cleanup_1

- assert:
    that:
    - result_cleanup_1.changed == true  # Should delete the 4 VRFs we created

- name: CLEANUP.2 - MSD QUERY - [wait_for] Wait 60 seconds for cleanup to complete
  wait_for:
    timeout: 60

- name: CLEANUP.3 - MSD QUERY - [query] Verify all VRFs were deleted
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ parent_fabric }}"
    state: query
  register: result_cleanup_3

- name: CLEANUP.3a - MSD QUERY - [debug] print final query result
  ansible.builtin.debug:
    var: result_cleanup_3

- assert:
    that:
    - result_cleanup_3.response|length == 0  # No VRFs should remain