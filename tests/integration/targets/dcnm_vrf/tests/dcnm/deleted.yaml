##############################################
##            REQUIRED VARS                 ##
##############################################
# fabric_1
# A VXLAN_EVPN fabric
#
# switch_1
# A vrf-lite capable switch
# Does not require an interface
#
# switch_2
# A vrf-lite capable switch
#
# interface_2
# Ethernet interface on switch_2
# used to test VRF LITE configuration.
#
##############################################

##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    rest_path: "/rest/control/fabrics/{{ fabric_1 }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ fabric_1 }}"
  when: controller_version >= "12"

- name: SETUP.0 - DELETED - print vars
  ansible.builtin.debug:
    var: item
  with_items:
     - "fabric_1 : {{ fabric_1 }}"
     - "switch_1 : {{ switch_1 }}"
     - "switch_2 : {{ switch_2 }}"
     - "interface_2 : {{ interface_2 }}"

- name: SETUP.1 - DELETED - Verify fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result

- assert:
    that:
    - 'result.response.DATA != None'

- name: SETUP.2 - DELETED - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted
  register: result_setup_2

- name: SETUP.2a - DELETED - Wait 40 seconds for controller and switch to sync
  wait_for:
    timeout: 40
  when: result_setup_2.changed == true

- name: SETUP.3 - DELETED - Create, Attach and Deploy VLAN+VRF
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
      deploy: true
  register: result

- name: SETUP.4 - DELETED - Wait for vrfStatus == DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

###############################################
###                 DELETED                  ##
###############################################

- name: TEST.1 - DELETED - Delete VRF ansible-vrf-int1
  cisco.dcnm.dcnm_vrf: &conf
    fabric: "{{ fabric_1 }}"
    state: deleted
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[1].MESSAGE == "OK"'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[2].METHOD == "DELETE"'
    - '(result.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[0].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == false'
    - 'result.diff[0].attach[1].deploy == false'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.1a - DELETED - Wait 40 seconds for controller and switch to sync
  wait_for:
    timeout: 40

- name: TEST.2 - DELETED - conf - Idempotence
  cisco.dcnm.dcnm_vrf: *conf
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'
    - 'result.diff|length == 0'

- name: TEST.3 - DELETED - Create, Attach and Deploy new VLAN+VRF+LITE EXTENSION 1x switch
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_2 }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # dot1q can be got from dcnm
      deploy: true
  register: result

- name: TEST.4 - DELETED - Wait for vrfStatus == DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.5 - DELETED - Delete VRF+LITE EXTENSION 1x switch
  cisco.dcnm.dcnm_vrf: &conf1
    fabric: "{{ fabric_1 }}"
    state: deleted
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_2 }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # controller can provide dot1q
      deploy: true
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[1].MESSAGE == "OK"'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[2].METHOD == "DELETE"'
    - '(result.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[0].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == false'
    - 'result.diff[0].attach[1].deploy == false'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.5a - DELETED - Wait 40 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 40

- name: TEST.6 - DELETED - conf1 - Idempotence
  cisco.dcnm.dcnm_vrf: *conf1
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'
    - 'result.diff|length == 0'

- name: TEST.7 - DELETED - Create, Attach, Deploy VRF+LITE EXTENSION switch_2
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_2 }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # dot1q can be got from dcnm
      deploy: true
  register: result

- name: TEST.8 - DELETED - Wait for vrfStatus == DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.9 - DELETED - Delete VRF+LITE EXTENSION - empty config element
  cisco.dcnm.dcnm_vrf: &conf2
    fabric: "{{ fabric_1 }}"
    state: deleted
    config:
  register: result

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[1].MESSAGE == "OK"'
    - 'result.response[2].RETURN_CODE == 200'
    - 'result.response[2].METHOD == "DELETE"'
    - '(result.response[0].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[0].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == false'
    - 'result.diff[0].attach[1].deploy == false'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.10a - DELETED - Wait 40 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 40

- name: TEST.10 - DELETED - conf1 - Idempotence
  cisco.dcnm.dcnm_vrf: *conf2
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'
    - 'result.diff|length == 0'

################################################
####                 CLEAN-UP                 ##
################################################

- name: CLEANUP.1 - DELETED - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted
