##############################################
##            REQUIRED VARS                 ##
##############################################
# fabric_1
#
# - A VXLAN_EVPN fabric
#
# switch_1
#
# - A vrf-lite capable switch
# - Does not require an interface
#
# switch_2
#
# - A vrf-lite capable switch
#
# interface_2a
#
# - Ethernet interface on switch_2
# - Used to test VRF LITE configuration.
#
##############################################

##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    rest_path: "/rest/control/fabrics/{{ fabric_1 }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ fabric_1 }}"
  when: controller_version >= "12"

- name: SETUP.0 - DELETED - print vars
  ansible.builtin.debug:
    var: item
  with_items:
     - "fabric_1 : {{ fabric_1 }}"
     - "switch_1 : {{ switch_1 }}"
     - "switch_2 : {{ switch_2 }}"
     - "interface_2a : {{ interface_2a }}"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.1 - DELETED - [dcnm_rest.GET] Verify fabric is deployed."

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result_setup_1

- assert:
    that:
    - result_setup_1.response.DATA != None

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.2 - DELETED - [deleted] Delete all VRFs"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted
  register: result_setup_2

- name: SETUP.2a - DELETED - [wait_for] Wait 40 seconds for controller and switch to sync
  wait_for:
    timeout: 40
  when: result_setup_2.changed == true

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.3 - DELETED - [merged] Create, Attach, Deploy VLAN+VRF ansible-vrf"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
      deploy: true
  register: result_setup_3

- name: SETUP.4 - DELETED - [query] Wait for vrfStatus == DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_setup_4
  until:
    - "result_setup_4.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- name: SETUP.4a - DELETED - [debug] print result_setup_3
  debug:
    var: result_setup_3

- assert:
    that:
    - result_setup_3.changed == true
    - result_setup_3.diff[0].attach[0].deploy == true
    - result_setup_3.diff[0].attach[1].deploy == true
    - result_setup_3.diff[0].vrf_name == "ansible-vrf-int1"
    - result_setup_3.response[0].RETURN_CODE == 200
    - result_setup_3.response[1].RETURN_CODE == 200
    - result_setup_3.response[2].RETURN_CODE == 200
    - (result_setup_3.response[1].DATA|dict2items)[0].value == "SUCCESS"
    - (result_setup_3.response[1].DATA|dict2items)[1].value == "SUCCESS"
    - switch_1 in result_setup_3.diff[0].attach[0].ip_address
    - switch_2 in result_setup_3.diff[0].attach[1].ip_address

###############################################
###                 DELETED                  ##
###############################################

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1 - DELETED - [deleted] Delete VRF ansible-vrf-int1"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf: &conf1
    fabric: "{{ fabric_1 }}"
    state: deleted
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
  register: result_1

- name: TEST.1a - DELETED - [wait_for] Wait 60 seconds for controller and switch to sync
  wait_for:
    timeout: 60

- name: TEST.1b - DELETED - [debug] print result_1
  debug:
    var: result_1

- assert:
    that:
    - result_1.changed == true
    - result_1.diff[0].attach[0].deploy == false
    - result_1.diff[0].attach[1].deploy == false
    - result_1.diff[0].vrf_name == "ansible-vrf-int1"
    - result_1.response[1].MESSAGE == "OK"
    - result_1.response[2].METHOD == "DELETE"
    - result_1.response[0].RETURN_CODE == 200
    - result_1.response[1].RETURN_CODE == 200
    - result_1.response[2].RETURN_CODE == 200
    - (result_1.response[0].DATA|dict2items)[0].value == "SUCCESS"
    - (result_1.response[0].DATA|dict2items)[1].value == "SUCCESS"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1c - DELETED - [deleted] conf1 - Idempotence"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf: *conf1
  register: result_1c

- name: TEST.1d - DELETED - [debug] print result_1c
  debug:
    var: result_1c

- assert:
    that:
    - result_1c.changed == false
    - result_1c.response|length == 0
    - result_1c.diff|length == 0

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2 - DELETED - [merged] Create, Attach, Deploy VLAN+VRF+LITE ansible-vrf-int1 switch_2"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_2a }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # optional controller can provide
      deploy: true
  register: result_2

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2a - DELETED - [query] Wait for vrfStatus == DEPLOYED"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_2a
  until:
    - "result_2a.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- name: TEST.2b - DELETED - [debug] print result_2
  debug:
    var: result_2

- assert:
    that:
    - result_2.changed == true
    - result_2.diff[0].attach[0].deploy == true
    - result_2.diff[0].attach[1].deploy == true
    - result_2.diff[0].vrf_name == "ansible-vrf-int1"
    - result_2.response[0].RETURN_CODE == 200
    - result_2.response[1].RETURN_CODE == 200
    - result_2.response[2].RETURN_CODE == 200
    - (result_2.response[1].DATA|dict2items)[0].value == "SUCCESS"
    - (result_2.response[1].DATA|dict2items)[1].value == "SUCCESS"
    - switch_1 in result_2.diff[0].attach[0].ip_address
    - switch_2 in result_2.diff[0].attach[1].ip_address

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2b - DELETED - [deleted] Delete VRF+LITE ansible-vrf-int1 switch_2"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf: &conf2
    fabric: "{{ fabric_1 }}"
    state: deleted
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_2a }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # controller can provide dot1q
      deploy: true
  register: result_2b

- name: TEST.2c - DELETED - [debug] print result_2b
  debug:
    var: result_2b

- assert:
    that:
    - result_2b.changed == true
    - result_2b.diff[0].attach[0].deploy == false
    - result_2b.diff[0].attach[1].deploy == false
    - result_2b.diff[0].vrf_name == "ansible-vrf-int1"
    - result_2b.response[1].MESSAGE == "OK"
    - result_2b.response[2].METHOD == "DELETE"
    - result_2b.response[0].RETURN_CODE == 200
    - result_2b.response[1].RETURN_CODE == 200
    - result_2b.response[2].RETURN_CODE == 200
    - (result_2b.response[0].DATA|dict2items)[0].value == "SUCCESS"
    - (result_2b.response[0].DATA|dict2items)[1].value == "SUCCESS"

- name: TEST.2d - DELETED - [wait_for] Wait 60 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 60

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2e - DELETED - [deleted] conf2 - Idempotence"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: TEST.2e - DELETED - [deleted] conf2 - Idempotence
  cisco.dcnm.dcnm_vrf: *conf2
  register: result_2e

- name: TEST.2f - DELETED - [debug] print result_2e
  debug:
    var: result_2e

- assert:
    that:
    - result_2e.changed == false
    - result_2e.response|length == 0
    - result_2e.diff|length == 0

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.3 - DELETED - [merged] Create, Attach, Deploy VRF+LITE switch_2"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_2a }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # optional controller can provide
      deploy: true
  register: result_3

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.3a - DELETED - [query] Wait for vrfStatus == DEPLOYED"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_3a
  until:
    - "result_3a.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- name: TEST.3b - DELETED - [debug] print result_3
  debug:
    var: result_3

- assert:
    that:
    - result_3.changed == true
    - result_3.diff[0].attach[0].deploy == true
    - result_3.diff[0].attach[1].deploy == true
    - result_3.diff[0].vrf_name == "ansible-vrf-int1"
    - result_3.response[0].RETURN_CODE == 200
    - result_3.response[1].RETURN_CODE == 200
    - result_3.response[2].RETURN_CODE == 200
    - (result_3.response[1].DATA|dict2items)[0].value == "SUCCESS"
    - (result_3.response[1].DATA|dict2items)[1].value == "SUCCESS"
    - switch_1 in result_3.diff[0].attach[0].ip_address
    - switch_2 in result_3.diff[0].attach[1].ip_address

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.3c - DELETED - [deleted] Delete VRF+LITE - empty config element"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf: &conf3
    fabric: "{{ fabric_1 }}"
    state: deleted
    config:
  register: result_3c

- name: TEST.3d - DELETED - [debug] print result_3c
  debug:
    var: result_3c

- assert:
    that:
    - result_3c.changed == true
    - result_3c.diff[0].attach[0].deploy == false
    - result_3c.diff[0].attach[1].deploy == false
    - result_3c.diff[0].vrf_name == "ansible-vrf-int1"
    - result_3c.response[1].MESSAGE == "OK"
    - result_3c.response[2].METHOD == "DELETE"
    - result_3c.response[0].RETURN_CODE == 200
    - result_3c.response[1].RETURN_CODE == 200
    - result_3c.response[2].RETURN_CODE == 200
    - (result_3c.response[0].DATA|dict2items)[0].value == "SUCCESS"
    - (result_3c.response[0].DATA|dict2items)[1].value == "SUCCESS"

- name: TEST.3d - DELETED - [wait_for] Wait 60 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 60

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.3e - DELETED - conf3 - Idempotence"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf: *conf3
  register: result_3e

- name: TEST.3f - DELETED - [debug] print result_3e
  debug:
    var: result_3e

- assert:
    that:
    - result_3e.changed == false
    - result_3e.diff|length == 0
    - result_3e.response|length == 0

################################################
##                 CLEAN-UP                   ##
################################################

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "CLEANUP.1 - DELETED - [deleted] Delete all VRFs"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted

- name: CLEANUP.2 - DELETED - [wait_for] Wait 60 seconds for controller and switch to sync
  wait_for:
    timeout: 60
