##############################################
##            REQUIRED VARS                 ##
##############################################
# test_fabric
# A VXLAN_EVPN fabric
#
# switch_1
# A border switch
#
# switch_2
# A border switch
#
# switch_3
# A non-border switch
#
# interface_1
# Ethernet interface on switch_1 and switch_2
# used to test VRF LITE configuration.

##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    rest_path: "/rest/control/fabrics/{{ test_fabric }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ test_fabric }}"
  when: controller_version >= "12"

- name: SETUP.1 - MERGED - Verify fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result

- assert:
    that:
    - 'result.response.DATA != None'

- name: SETUP.2 - MERGED - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted
  register: result_setup_2

- name: SETUP.3 - MERGED - Wait 40 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 40
  when: result_setup_2.changed == true

###############################################
###                MERGED                    ##
###############################################

- name: TEST.1 - MERGED - Create, Attach, Deploy VLAN+VRF
  cisco.dcnm.dcnm_vrf: &conf
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
      deploy: true
  register: result

- name: TEST.2 - MERGED - Query for vrfStatus transition to DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.3 - MERGED - conf1 - Idempotence
  cisco.dcnm.dcnm_vrf: *conf
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: TEST.4 - MERGED - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted

- name: TEST.5 - MERGED - Create, Attach, Deploy VLAN+VRF (controller provided)
  cisco.dcnm.dcnm_vrf: &conf2
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
      deploy: true
  register: result

- name: TEST.6 - MERGED - Query for vrfStatus transition to DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.7 - MERGED - conf2 - Idempotence
  cisco.dcnm.dcnm_vrf: *conf2
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: TEST.8 - MERGED - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted

- name: TEST.8a - MERGED - Wait 40 seconds for controller and switch to sync
  # While vrf-lite extension was not configured above, we still hit VRF
  # OUT-OF-SYNC. Let's see if waiting helps here too.
  wait_for:
    timeout: 40

- name: TEST.9 - MERGED - Create, Attach, Deploy VLAN+VRF+LITE EXTENSION 1x switch (user provided)
  cisco.dcnm.dcnm_vrf: &conf3
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_1 }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # dot1q can be got from dcnm
      deploy: true
  register: result

- name: TEST.10 - MERGED - Query for vrfStatus transition to DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_1 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_2 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.11 - MERGED - conf3 - Idempotence
  cisco.dcnm.dcnm_vrf: *conf3
  register: result

- assert:
    that:
    - 'result.changed == false'
    - 'result.response|length == 0'

- name: TEST.12 - MERGED - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted

- name: TEST.12a - MERGED - Wait 40 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 40

# Original wording in case I misinterpreted
# TEST.13 - MERGED - Create, Attach, Deploy VRF+VRF LITE EXTENSION -
#    one optional - Rest are populated from DCNM
- name: TEST.13 - MERGED - Create, Attach, Deploy VRF+VRF LITE EXTENSION - one optional (controller provided)
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - interface: "{{ interface_1 }}" # mandatory
      - ip_address: "{{ switch_1 }}"
      deploy: true
  register: result

- name: TEST.14 - MERGED - Query for vrfStatus transition to DEPLOYED
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: query
  register: query_result
  until:
    - "query_result.response[0].parent.vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- assert:
    that:
    - 'result.changed == true'
    - 'result.response[0].RETURN_CODE == 200'
    - 'result.response[1].RETURN_CODE == 200'
    - 'result.response[2].RETURN_CODE == 200'
    - '(result.response[1].DATA|dict2items)[0].value == "SUCCESS"'
    - '(result.response[1].DATA|dict2items)[1].value == "SUCCESS"'
    - 'result.diff[0].attach[0].deploy == true'
    - 'result.diff[0].attach[1].deploy == true'
    - '"{{ switch_2 }}" in result.diff[0].attach[0].ip_address'
    - '"{{ switch_1 }}" in result.diff[0].attach[1].ip_address'
    - 'result.diff[0].vrf_name == "ansible-vrf-int1"'

- name: TEST.15 - MERGED - Create, Attach, Deploy VRF - Update with incorrect VRF ID.
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
      - vrf_name: ansible-vrf-int1
        vrf_id: 9008012
        vrf_template: Default_VRF_Universal
        vrf_extension_template: Default_VRF_Extension_Universal
        attach:
          - ip_address: "{{ switch_1 }}"
          - ip_address: "{{ switch_2 }}"
        deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"cannot be updated to a different value" in result.msg'

- name: TEST.16 - MERGED - Create, Attach, Deploy VRF - Update with Out of Range VRF ID.
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
      - vrf_name: ansible-vrf-int1
        vrf_id: 9008012000000000
        vrf_template: Default_VRF_Universal
        vrf_extension_template: Default_VRF_Extension_Universal
        attach:
          - ip_address: "{{ switch_1 }}"
          - ip_address: "{{ switch_2 }}"
        deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"The item exceeds the allowed range of max" in result.msg'

- name: TEST.17 - MERGED - Create, Attach, Deploy VRF - VRF LITE missing required parameter
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_1 }}"
      - ip_address: "{{ switch_2 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
      deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"Invalid parameters in playbook: interface : Required parameter not found" in result.msg'

- name: TEST.18 - MERGED - Create, Attach and Deploy VRF - configure VRF LITE on non border switch
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: merged
    config:
    - vrf_name: ansible-vrf-int1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
      attach:
      - ip_address: "{{ switch_3 }}"
        vrf_lite:
          - peer_vrf: ansible-vrf-int1 # optional
            interface: "{{ interface_1 }}" # mandatory
            ipv4_addr: 10.33.0.2/30 # optional
            neighbor_ipv4: 10.33.0.1 # optional
            ipv6_addr: 2010::10:34:0:7/64 # optional
            neighbor_ipv6: 2010::10:34:0:3 # optional
            dot1q: 2 # dot1q can be got from dcnm
      deploy: true
  register: result
  ignore_errors: yes

- assert:
    that:
    - 'result.changed == false'
    - '"VRF LITE cannot be attached to switch" in result.msg'

###############################################
###                 CLEAN-UP                 ##
###############################################

- name: CLEANUP.1 - MERGED - Delete all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ test_fabric }}"
    state: deleted
