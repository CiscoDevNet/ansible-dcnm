##############################################
##               SETUP                      ##
##############################################

- name: Initialize the setup - delete all policies
  cisco.dcnm.dcnm_policy:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted                     # only choose form [merged, deleted, query]
    config:
      - name: template_101  # name is mandatory
      - name: template_102  # name is mandatory
      - name: template_103  # name is mandatory
      - name: template_104  # name is mandatory
      - name: template_105  # name is mandatory
      - name: my_base_ospf  # name is mandatory
      - name: my_feature_telemetry  # name is mandatory
      - switch:
          - ip: "{{ ansible_switch1 }}"
          - ip: "{{ ansible_switch2 }}"
  register: result
  tags: sanity

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'
  tags: sanity
- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'
  tags: sanity

- name: Initialize the setup - delete all templates
  cisco.dcnm.dcnm_template:
    state: deleted       # only choose form [merged, deleted, query]
    config:
      - name: template_101
      - name: template_102
      - name: template_103
      - name: template_104
      - name: template_105
      - name: my_base_ospf
      - name: my_feature_telemetry

  register: result
  tags: sanity

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'
  tags: sanity

- block:

##############################################
##                MERGE                     ##
##############################################

    - name: Create templates
      cisco.dcnm.dcnm_template: &temp_merge
        state: merged        # only choose form [merged, deleted, query]
        config:
          - name: template_101
            description: "Template_101"
            tags: "internal policy 101"
            content: |
              telemetry
                certificate /bootflash/telegraf.crt telegraf
                destination-profile
                  use-vrf management
                destination-group 1
                  ip address 10.195.225.176 port 57000 protocol gRPC encoding GPB
                sensor-group 1
                  data-source DME
                  path sys/ch depth unbounded
                subscription 1
                  dst-grp 1
                  snsr-grp 1 sample-interval 10000

          - name: template_102
            description: "Template_102"
            tags: "internal policy 102"
            content: |
              telemetry
                certificate /bootflash/telegraf.crt telegraf
                destination-profile
                  use-vrf management
                destination-group 2
                  ip address 10.195.224.176 port 52000 protocol gRPC encoding GPB
                sensor-group 2
                  data-source DME
                  path sys/ch depth unbounded
                subscription 2
                  dst-grp 2
                  snsr-grp 2 sample-interval 20000

          - name: template_103
            description: "Template_103"
            tags: "internal policy 103"
            content: |
              telemetry
                certificate /bootflash/telegraf.crt telegraf
                destination-profile
                  use-vrf management
                destination-group 3
                  ip address 10.195.225.176 port 53000 protocol gRPC encoding GPB
                sensor-group 3
                  data-source DME
                  path sys/ch depth unbounded
                subscription 3
                  dst-grp 3
                  snsr-grp 3 sample-interval 30000

          - name: template_104
            description: "Template_104"
            tags: "internal policy 104"
            content: |
              telemetry
                certificate /bootflash/telegraf.crt telegraf
                destination-profile
                  use-vrf management
                destination-group 4
                  ip address 10.195.224.176 port 54000 protocol gRPC encoding GPB
                sensor-group 4
                  data-source DME
                  path sys/ch depth unbounded
                subscription 4
                  dst-grp 4
                  snsr-grp 4 sample-interval 40000

          - name: template_105
            description: "Template_105"
            tags: "internal policy 105"
            content: |
              telemetry
                certificate /bootflash/telegraf.crt telegraf
                destination-profile
                  use-vrf management
                destination-group 5
                  ip address 10.195.224.176 port 55000 protocol gRPC encoding GPB
                sensor-group 5
                  data-source DME
                  path sys/ch depth unbounded
                subscription 5
                  dst-grp 5
                  snsr-grp 5 sample-interval 50000
      register: result
      tags: sanity

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 5'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
      tags: sanity

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Template Created" in item["DATA"]["status"]'
      loop: '{{ result.response }}'
      tags: sanity

    - name: Create templates with arguments
      cisco.dcnm.dcnm_template:
        state: merged        # only choose form [merged, deleted, query]
        config:
          - name: my_base_ospf
            tags: "base_ospf clone"
            description: "template which is a clone of base_ospf"
            content: |
              ##template variables

              #    Copyright (c) 2018 by Cisco Systems, Inc.
              #    All rights reserved.

              @(DisplayName="OSPF Process Tag", Description="OSPF routing process tag")
              string OSPF_TAG {
                minLength = 1;
                maxLength = 20;
              };

              @(DisplayName="Loopback IP", Description="Loopback IP address used as router-id")
              ipV4Address LOOPBACK_IP;

              ##
              ##template content

              router ospf $$OSPF_TAG$$
              router-id $$LOOPBACK_IP$$

              ##
      register: result
      tags: sanity
    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 1'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
      tags: sanity

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Template Created" in item["DATA"]["status"]'
      loop: '{{ result.response }}'
      tags: sanity

# Policy IT cases depend on telemetry feature being enabled on the switches. So create a policy for
# deploying the telemetry feature on the switches before starting the tests

    - name: Create template for telemetry feature
      cisco.dcnm.dcnm_template:
        state: merged        # only choose form [merged, deleted, query]
        config:
          - name: my_feature_telemetry
            tags: "telemetry"
            description: "internal template for enabling telemetry feature"
            content: |
              ##
              ##template content

              feature telemetry

              ##
      register: result
      tags: sanity
    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 1'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
      tags: sanity

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Template Created" in item["DATA"]["status"]'
      loop: '{{ result.response }}'
      tags: sanity

# Create the policy to deploy telemetry feature on the switches
    - name: Create telemetry policy
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        config:
          - name: my_feature_telemetry  # This must be a valid template name
            create_additional_policy: false  # Do not create a policy if it already exists
            priority: 101

          - switch:
              - ip: "{{ ansible_switch1 }}"
              - ip: "{{ ansible_switch2 }}"
        deploy: true
        state: merged
      register: result
      tags: sanity

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 2'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 2'
      tags: sanity

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Success" in item["DATA"]["successList"][0]["status"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx
      tags: sanity

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 1'
      when: (my_idx == (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx
      tags: sanity
