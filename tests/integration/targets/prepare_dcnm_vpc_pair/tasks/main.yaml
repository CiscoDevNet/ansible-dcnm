##############################################
##               SETUP                      ##
##############################################

- set_fact:
    controller_version: '12'

- name: Determine version of DCNM or NDFC
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /appcenter/cisco/ndfc/api/about/version
  register: result
  ignore_errors: yes

- set_fact:
    controller_version: "{{ result.response['DATA']['version'][0:2] | int }}"
  when: ( 'response' in result and result.response['RETURN_CODE'] == 200 and result.response['DATA']['version'] is search("\d\d.\d+") )
  ignore_errors: yes

- name: Determine version of DCNM or NDFC
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /fm/fmrest/about/version
  register: result
  ignore_errors: yes

- set_fact:
    controller_version: "{{ result.response['DATA']['version'][0:2] | int }}"
  when: ( 'response' in result and result.response['RETURN_CODE'] == 200 and result.response['DATA']['version'] is search("\d\d.\d+") )
  ignore_errors: yes

- name: Determine version of DCNM or NDFC
  cisco.dcnm.dcnm_rest:
    method: GET
    path: /fm/fmrest/about/version
  register: result
  ignore_errors: yes

- set_fact:
    controller_version: '11'
  when: ( 'response' in result and result.response['RETURN_CODE'] == 200 and result.response['DATA']['version'] == 'DEVEL' )
  ignore_errors: yes

- name: Initialise fabric type
  set_fact:
    fabric_type: ""

- name: Get the Fabric associations
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/rest/control/fabrics/{{ test_data_common.fabric }}"
  when: controller_version == '11'
  register: result
  ignore_errors: yes

- name: Setting fact
  set_fact:
    fabric_type: "{{ result.response['DATA']['fabricTechnology'] }}"
  when: (controller_version == '11' and 'response' in result and result.response['RETURN_CODE'] == 200)
  ignore_errors: yes

- name: Show the Fabric Type
  debug:
    var: fabric_type

- name: Get the Fabric Type
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ test_data_common.fabric }}"
  when: controller_version == '12'
  register: result
  ignore_errors: yes

- name: Setting fact
  set_fact:
    fabric_type: "{{ result.response['DATA']['fabricTechnology'] }}"
  when: (controller_version == '12' and 'response' in result and result.response['RETURN_CODE'] == 200)
  ignore_errors: yes

- name: Show the fabric type
  debug:
    var: fabric_type

- name: Get switch inventory from fabric
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ test_data_common.fabric }}/inventory/switchesByFabric"
  register: switch_inventory_result
  ignore_errors: yes

- name: Create IP to Serial Number mapping
  set_fact:
    ip_to_sn_mapping: "{{ ip_to_sn_mapping | default({}) | combine({item.ipAddress: item.serialNumber}) }}"
  loop: "{{ switch_inventory_result.response.DATA | default([]) }}"
  when: 
    - switch_inventory_result is defined
    - switch_inventory_result.response is defined
    - switch_inventory_result.response.RETURN_CODE == 200
    - switch_inventory_result.response.DATA is defined
    - item.ipAddress is defined
    - item.serialNumber is defined

- name: Show IP to Serial Number mapping
  debug:
    var: ip_to_sn_mapping
  when: ip_to_sn_mapping is defined

- name: Update test_data_common with fabric_type and ip_to_sn_mapping
  set_fact:
    test_data_common: "{{ test_data_common | combine({'fabric_type': fabric_type, 'ip_to_sn_mapping': ip_to_sn_mapping | default({})}) }}"
  when: fabric_type is defined
