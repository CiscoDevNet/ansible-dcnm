##############################################
##               SETUP                      ##
##############################################

- name: Remove local log file
  local_action: command rm -f res_mgr.log

- name: Delete Resources
  cisco.dcnm.dcnm_resource_manager: &rm_delete
    state: deleted                                 # choose form [merged, deleted, query]
    fabric: "{{ ansible_it_fabric }}"
    config:
      - entity_name: "l3_vni_fabric"               # A unique name to identify the resource
        pool_type: "ID"                            # choose from ['ID', 'IP', 'SUBNET']
        pool_name: "L3_VNI"                        # Based on the 'poolType', select appropriate name
        scope_type: "fabric"                       # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']

      - entity_name: "l2_vni_fabric"               # A unique name to identify the resource
        pool_type: "ID"                            # choose from ['ID', 'IP', 'SUBNET']
        pool_name: "L2_VNI"                        # Based on the 'poolType', select appropriate name
        scope_type: "fabric"                       # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']

      - entity_name: "loopback_dev"                # A unique name to identify the resource
        pool_type: "ID"                            # choose from ['ID', 'IP', 'SUBNET']
        pool_name: "LOOPBACK_ID"                   # Based on the 'poolType', select appropriate name
        scope_type: "device"                       # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
        switch:                                    # provide the switch information to which the given resource is attached
          - "{{ ansible_switch1 }}"
          - "{{ ansible_switch2 }}"

      - entity_name: "{{ ansible_sno_1 }}~{{ ansible_sno_2 }}" # A unique name to identify the resource
        pool_type: "ID"                            # choose from ['ID', 'IP', 'SUBNET']
        pool_name: "VPC_ID"                        # Based on the 'poolType', select appropriate name
        scope_type: "device_pair"                  # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
        switch:                                    # provide the switch information to which the given resource is attached
          - "{{ ansible_switch1 }}"
          - "{{ ansible_switch2 }}"

      - entity_name: "mmudigon-2"                  # A unique name to identify the resource
        pool_type: "IP"                            # choose from ['ID', 'IP', 'SUBNET']
        pool_name: "LOOPBACK0_IP_POOL"             # Based on the 'poolType', select appropriate name
        scope_type: "fabric"                       # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']

      - entity_name: "{{ ansible_sno_1 }}~{{ intf_1_10 }}" # A unique name to identify the resource
        pool_type: "IP"                            # choose from ['ID', 'IP', 'SUBNET']
        pool_name: "LOOPBACK1_IP_POOL"             # Based on the 'poolType', select appropriate name
        scope_type: "device_interface"             # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
        switch:                                    # provide the switch information to which the given resource is attached
          - "{{ ansible_switch1 }}"

      - entity_name: "{{ ansible_sno_1 }}~{{ intf_1_3 }}~{{ ansible_sno_2 }}~{{ intf_1_3 }}"  # A unique name to identify the resource
        pool_type: "SUBNET"                        # choose from ['ID', 'IP', 'SUBNET']
        pool_name: "SUBNET"                        # Based on the 'poolType', select appropriate name
        scope_type: "link"                         # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
        switch:                                    # provide the switch information to which the given resource is attached
          - "{{ ansible_switch1 }}"
  register: result

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- block:

##############################################
##                MERGE                     ##
##############################################

    - name: Create Resources
      cisco.dcnm.dcnm_resource_manager: &rm_merge
        state: merged                              # choose form [merged, deleted, query]
        fabric: "{{ ansible_it_fabric }}"
        config:
          - entity_name: "l3_vni_fabric"           # A unique name to identify the resource
            pool_type: "ID"                        # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "L3_VNI"                    # Based on the 'poolType', select appropriate name
            scope_type: "fabric"                   # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
            resource: "101"                        # The value of the resource being created

          - entity_name: "l2_vni_fabric"           # A unique name to identify the resource
            pool_type: "ID"                        # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "L2_VNI"                    # Based on the 'poolType', select appropriate name
            scope_type: "fabric"                   # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
            resource: "102"                        # The value of the resource being created

          - entity_name: "loopback_dev"            # A unique name to identify the resource
            pool_type: "ID"                        # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "LOOPBACK_ID"               # Based on the 'poolType', select appropriate name
            scope_type: "device"                   # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
            switch:                                # provide the switch information to which the given resource is to be attached
              - "{{ ansible_switch1 }}"            # provide the switch information to which the given resource is to be attached
              - "{{ ansible_switch2 }}"            # provide the switch information to which the given resource is to be attached
            resource: "200"                        # The value of the resource being created

          - entity_name: "{{ ansible_sno_1 }}~{{ ansible_sno_2 }}"  # A unique name to identify the resource
            pool_type: "ID"                        # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "VPC_ID"                    # Based on the 'poolType', select appropriate name
            scope_type: "device_pair"              # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
            switch:                                # provide the switch information to which the given resource is to be attached
              - "{{ ansible_switch1 }}"            # provide the switch information to which the given resource is to be attached
              - "{{ ansible_switch2 }}"            # provide the switch information to which the given resource is to be attached
            resource: "500"                        # The value of the resource being created

          - entity_name: "mmudigon-2"              # A unique name to identify the resource
            pool_type: "IP"                        # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "LOOPBACK0_IP_POOL"         # Based on the 'poolType', select appropriate name
            scope_type: "fabric"                   # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
            resource: "110.1.1.1"                  # The value of the resource being created

          - entity_name: "{{ ansible_sno_1 }}~{{ intf_1_10 }}"  # A unique name to identify the resource
            pool_type: "IP"                        # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "LOOPBACK1_IP_POOL"         # Based on the 'poolType', select appropriate name
            scope_type: "device_interface"         # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
            switch:                                # provide the switch information to which the given resource is to be attached
              - "{{ ansible_switch1 }}"            # provide the switch information to which the given resource is to be attached
            resource: "fe:80::04"                  # The value of the resource being created

          - entity_name: "{{ ansible_sno_1 }}~{{ intf_1_3 }}~{{ ansible_sno_2 }}~{{ intf_1_3 }}"  # A unique name to identify the resource
            pool_type: "SUBNET"                    # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "SUBNET"                    # Based on the 'poolType', select appropriate name
            scope_type: "link"                     # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']
            switch:                                # provide the switch information to which the given resource is to be attached
              - "{{ ansible_switch1 }}"
            resource: "fe:80:0505::05/64"          # The value of the resource being created
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 9'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["response"] | length) == 9'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
      loop: '{{ result.response }}'

##############################################
##             DELETE                       ##
##############################################

    - name: Delete Resources
      cisco.dcnm.dcnm_resource_manager: *rm_delete
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 9'
          - '(result["response"][0]["DATA"]["successList"] | length) == 9'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
      loop: '{{ result.response }}'

##############################################
##          IDEMPOTENCE                     ##
##############################################

    - name: Delete Resources - Idempotence
      cisco.dcnm.dcnm_resource_manager: *rm_delete
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
      loop: '{{ result.response }}'

##############################################
##        MISSING PARAMS IN DELETE          ##
##############################################

    - name: Delete Resources - scope_type missing
      cisco.dcnm.dcnm_resource_manager:
        state: deleted                                 # choose form [merged, deleted, query]
        fabric: "{{ ansible_it_fabric }}"
        config:
          - entity_name: "l3_vni_fabric"               # A unique name to identify the resource
      register: result
      ignore_errors: yes

    - assert:
        that:
          - 'result["msg"] == "Mandatory parameter ''scope_type'' missing"'

##############################################
##        MISSING PARAMS IN DELETE          ##
##############################################

    - name: Delete Resources - pool_type missing
      cisco.dcnm.dcnm_resource_manager:
        state: deleted                                 # choose form [merged, deleted, query]
        fabric: "{{ ansible_it_fabric }}"
        config:
          - scope_type: "fabric"
      register: result
      ignore_errors: yes

    - assert:
        that:
          - 'result["msg"] == "Mandatory parameter ''pool_type'' missing"'

 ##############################################
##        MISSING PARAMS IN DELETE          ##
##############################################

    - name: Delete Resources - entity_name missing
      cisco.dcnm.dcnm_resource_manager:
        state: deleted                                 # choose form [merged, deleted, query]
        fabric: "{{ ansible_it_fabric }}"
        config:
          - pool_type: "ID"                            # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "VPC_ID"                        # Based on the 'poolType', select appropriate name
            scope_type: "fabric"
      register: result
      ignore_errors: yes

    - assert:
        that:
          - 'result["msg"] == "Mandatory parameter ''entity_name'' missing"'

##############################################
##        MISSING PARAMS IN DELETE          ##
##############################################

    - name: Delete Resources - pool_name missing
      cisco.dcnm.dcnm_resource_manager:
        state: deleted                                 # choose form [merged, deleted, query]
        fabric: "{{ ansible_it_fabric }}"
        config:
          - entity_name: "l3_vni_fabric"               # A unique name to identify the resource
            pool_type: "ID"                            # choose from ['ID', 'IP', 'SUBNET']
            scope_type: "fabric"
      register: result
      ignore_errors: yes

    - assert:
        that:
          - 'result["msg"] == "Mandatory parameter ''pool_name'' missing"'

##############################################
##        MISSING PARAMS IN DELETE          ##
##############################################

    - name: Delete Resources - switch info missing
      cisco.dcnm.dcnm_resource_manager:
        state: deleted                                 # choose form [merged, deleted, query]
        fabric: "{{ ansible_it_fabric }}"
        config:
          - entity_name: "{{ ansible_sno_1 }}~{{ ansible_sno_2 }}" # A unique name to identify the resource
            pool_type: "ID"                            # choose from ['ID', 'IP', 'SUBNET']
            pool_name: "VPC_ID"                        # Based on the 'poolType', select appropriate name
            scope_type: "device_pair"                  # choose from ['fabric', 'device', device_interface', 'device_pair', 'link']

      register: result
      ignore_errors: yes

    - assert:
        that:
          - '"switch : Required parameter not found" in result["msg"]'
