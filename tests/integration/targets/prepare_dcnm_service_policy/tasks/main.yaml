##############################################
##           INITIALIZE SETUP               ##
##############################################

##############################################
##       DELETE FEATURE PBR POLICIY         ##
##############################################

- name: Delete feature_pbr policy
  cisco.dcnm.dcnm_policy:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted                     # only choose form [merged, deleted, query]
    config:
      - name: feature_pbr  # name is mandatory
      - switch:
          - ip: "{{ ansible_switch1 }}"
  register: result

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

##############################################
##       DELETE SERVICE POLICIES            ##
##############################################

- name: Initialize the setup - Delete service policies
  cisco.dcnm.dcnm_service_policy:
    fabric: "{{ ansible_it_fabric }}"                     # mandatory
    service_fabric: "{{ ansible_it_service_fabric }}"    # mandatory
    state: deleted                                        # optional, default merged
  register: result

- assert:
    that:
        - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: Initialize the setup - sleep for 180 seconds for DCNM to completely update the state
  wait_for:
    timeout: 180

###############################################
###   DELETE SERVICE ROUTE PEERINGS          ##
###############################################

- name: Initialize the setup - Delete Route Peerings
  cisco.dcnm.dcnm_service_route_peering:
    fabric: "{{ ansible_it_fabric }}"
    service_fabric: "{{ ansible_it_service_fabric }}"
    state: deleted
  register: result

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: Initialize the setup - sleep for 180 seconds for DCNM to completely update the state
  wait_for:
    timeout: 180

###############################################
###       DELETE SERVICE NODES               ##
###############################################

- name: Initialize the setup - Delete Service Nodes
  cisco.dcnm.dcnm_service_node:
    fabric: "{{ ansible_it_fabric }}"
    service_fabric: "{{ ansible_it_service_fabric }}"
    state: deleted
    config:
      - name: "{{ ansible_snode_1 }}"
        type: firewall
        form_factor: physical
        svc_int_name: svc1
        attach_interface: "{{ ansible_att_intf1 }}"
        switches:
          - "{{ ansible_switch1 }}"
      - name: "{{ ansible_snode_2 }}"
        type: load_balancer
        form_factor: physical
        svc_int_name: svc2
        attach_interface: "{{ ansible_att_intf2 }}"
        switches:
          - "{{ ansible_switch1 }}"
  register: result

- assert:
    that:
    - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

###############################################
###            DELETE NETWORKS               ##
###############################################

- name: Initialize the setup - Delete Networks
  cisco.dcnm.dcnm_network: 
    fabric: "{{ ansible_it_fabric }}"
    state: deleted
    config:
      - net_name: "{{ ansible_net_11 }}"
        net_id: 110
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 111
        gw_ip_subnet: '11.11.11.1/24'
      - net_name: "{{ ansible_net_12 }}"
        net_id: 120
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 121
        gw_ip_subnet: '12.12.12.1/24'
      - net_name: "{{ ansible_net_21 }}"
        net_id: 210
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 211
        gw_ip_subnet: '21.21.21.1/24'
      - net_name: "{{ ansible_net_22 }}"
        net_id: 220
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 221
        gw_ip_subnet: '22.22.22.1/24'
      - net_name: "{{ ansible_net_31 }}"
        net_id: 310
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 311
        gw_ip_subnet: '31.31.31.1/24'
      - net_name: "{{ ansible_net_32 }}"
        net_id: 320
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 321
        gw_ip_subnet: '32.32.32.1/24'
      - net_name: "{{ ansible_net_41 }}"
        net_id: 410
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 411
        gw_ip_subnet: '41.41.41.1/24'
      - net_name: "{{ ansible_net_42 }}"
        net_id: 420
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 421
        gw_ip_subnet: '42.42.42.1/24'
  register: result

- assert:
    that:
    - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: Initialize the setup - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

###############################################
###               DELETE VRFS                ##
###############################################

- name: Initialize the setup - Delete VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ ansible_it_fabric }}" 
    state: deleted
    config:
      - vrf_name: "{{ ansible_vrf_11 }}"
        attach:
            - ip_address: "{{ ansible_switch1 }}"
            - ip_address: "{{ ansible_switch2 }}"
      - vrf_name: "{{ ansible_vrf_21 }}" 
        attach:
            - ip_address: "{{ ansible_switch1 }}"
            - ip_address: "{{ ansible_switch2 }}"
      - vrf_name: "{{ ansible_vrf_31 }}" 
        attach:
            - ip_address: "{{ ansible_switch1 }}"
            - ip_address: "{{ ansible_switch2 }}"
      - vrf_name: "{{ ansible_vrf_41 }}" 
        attach:
            - ip_address: "{{ ansible_switch1 }}"
            - ip_address: "{{ ansible_switch2 }}"
  register: result  

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'  
  loop: '{{ result.response }}'

- name: Initialize the setup - sleep for 10 seconds for DCNM to completely update the state
  wait_for:
    timeout: 10

##############################################
##           MERGE VRFS                     ##
##############################################

- name: Initialize the setup - Create all VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ ansible_it_fabric }}" 
    state: merged
    config:
      - vrf_name: "{{ ansible_vrf_11 }}"
        attach:
            - ip_address: "{{ ansible_switch1 }}"
      - vrf_name: "{{ ansible_vrf_21 }}" 
        attach:
            - ip_address: "{{ ansible_switch1 }}"
      - vrf_name: "{{ ansible_vrf_31 }}" 
        attach:
            - ip_address: "{{ ansible_switch1 }}"
      - vrf_name: "{{ ansible_vrf_41 }}" 
        attach:
            - ip_address: "{{ ansible_switch1 }}"
  register: result  

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'  
  loop: '{{ result.response }}'

- name: Initialize the setup - sleep for 10 seconds for DCNM to completely update the state
  wait_for:
    timeout: 10

###############################################
###           MERGE NETWORKS                 ##
###############################################

- name: Initialize the setup - Create Networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ ansible_it_fabric }}"
    state: merged
    config:
      - net_name: "{{ ansible_net_11 }}"
        vrf_name: "{{ ansible_vrf_11 }}"
        net_id: 110
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 111
        gw_ip_subnet: '11.11.11.1/24'
        deploy: True
      - net_name: "{{ ansible_net_12 }}"
        vrf_name: "{{ ansible_vrf_11 }}"
        net_id: 120
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 121
        gw_ip_subnet: '12.12.12.1/24'
        deploy: True
      - net_name: "{{ ansible_net_21 }}"
        vrf_name: "{{ ansible_vrf_21 }}"
        net_id: 210
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 211
        gw_ip_subnet: '21.21.21.1/24'
        deploy: True
      - net_name: "{{ ansible_net_22 }}"
        vrf_name: "{{ ansible_vrf_21 }}"
        net_id: 220
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 221
        gw_ip_subnet: '22.22.22.1/24'
        deploy: True
      - net_name: "{{ ansible_net_31 }}"
        vrf_name: "{{ ansible_vrf_31 }}"
        net_id: 310
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 311
        gw_ip_subnet: '31.31.31.1/24'
        deploy: True
      - net_name: "{{ ansible_net_32 }}"
        vrf_name: "{{ ansible_vrf_31 }}"
        net_id: 320
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 321
        gw_ip_subnet: '32.32.32.1/24'
        deploy: True
      - net_name: "{{ ansible_net_41 }}"
        vrf_name: "{{ ansible_vrf_41 }}"
        net_id: 410
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 411
        gw_ip_subnet: '41.41.41.1/24'
        deploy: True
      - net_name: "{{ ansible_net_42 }}"
        vrf_name: "{{ ansible_vrf_41 }}"
        net_id: 420
        net_template: Default_Network_Universal
        net_extension_template: Default_Network_Extension_Universal
        vlan_id: 421
        gw_ip_subnet: '42.42.42.1/24'
        deploy: True
  register: result

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: Initialize the setup - sleep for 40 seconds for DCNM to completely update the state
  wait_for:
    timeout: 40

###############################################
###           MERGE SERVICE NODES            ##
###############################################

- name: Initialize the setup - Create all Service Nodes
  cisco.dcnm.dcnm_service_node: 
    fabric: "{{ ansible_it_fabric }}"
    service_fabric: "{{ ansible_it_service_fabric }}"
    state: merged
    config:
      - name: "{{ ansible_snode_1 }}"
        type: firewall
        form_factor: physical
        svc_int_name: svc1
        attach_interface: "{{ ansible_att_intf1 }}"
        switches:
          - "{{ ansible_switch1 }}"
      - name: "{{ ansible_snode_2 }}"
        type: load_balancer
        form_factor: physical
        svc_int_name: svc2
        attach_interface: "{{ ansible_att_intf2 }}"
        switches:
          - "{{ ansible_switch1 }}"
  register: result

- assert:
    that:
    - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

###############################################
###      MERGE SERVICE ROUTE PEERINGS        ##
###############################################

- name: Initialize the setup - Create service route peerings
  cisco.dcnm.dcnm_service_route_peering: 
    fabric: "{{ ansible_it_fabric }}" 
    service_fabric: "{{ ansible_it_service_fabric }}" 
    state: merged
    config: 
      - name: IT-FW-RP1                                  # mandatory
        node_name: "{{ ansible_snode_1 }}"               # mandatory
        deploy_mode: intra_tenant_fw                     # mandatory, choices=[intra_tenant_fw, inter_tenant_fw]
        inside_network:                                  # 
          vrf: "{{ ansible_vrf_11 }}"                    # mandatory
          name: rp1-sn1-inside-net                       # mandatory
          vlan_id: 101                                   # mandatory
          profile: 
            ipv4_gw: 192.161.1.1/24                      # mandatory
        next_hop: 192.161.1.100                          # mandatory
        outside_network:                                 # 
          vrf: "{{ ansible_vrf_11 }}"                    # mandatory
          name: rp1-sn1-outside-net                      # mandatory
          vlan_id: 102                                   # mandatory
          profile:
            ipv4_gw: 192.161.2.1/24                      # mandatory
        reverse_next_hop: 192.161.2.100                  # optional, default is ''

      - name: IT-ADC-RP4
        node_name: "{{ ansible_snode_2 }}"               # mandatory
        deploy_mode: one_arm_adc                         # mandatory, choices=[one_arm_adc, two_arm_adc]
        peering_option: ebgp                             # optional, default is static, choices=[static, ebgp]
        first_arm: 
          vrf: "{{ ansible_vrf_21 }}"                    # mandatory
          name: rp4-sn2-first-arm                        # mandatory
          vlan_id: 401                                   # mandatory
          profile: 
            ipv4_gw: 192.164.1.1/24                      # mandatory
            ipv4_neighbor: 41.41.41.1                    # mandatory
            ipv4_lo: 41.41.41.2                          # mandatory
        reverse_next_hop: 192.164.1.100                  # mandatory

      - name: IT-ADC-RP5
        node_name: "{{ ansible_snode_2 }}"               # mandatory
        deploy_mode: two_arm_adc                         # mandatory, choices=[one_arm_adc, two_arm_adc]
        peering_option: ebgp                             # optional, default is static, choices=[static, ebgp]
        first_arm: 
          vrf: "{{ ansible_vrf_31 }}"                    # mandatory
          name: rp5-sn2-first-arm                        # mandatory
          vlan_id: 501                                   # mandatory
          profile: 
            ipv4_gw: 192.165.1.1/24                      # mandatory
            ipv4_neighbor: 51.51.51.1                    # mandatory
            ipv4_lo: 51.51.51.2                          # mandatory
        second_arm:
          vrf: "{{ ansible_vrf_31 }}"                    # mandatory
          name: rp5-sn2-second-arm                       # mandatory
          vlan_id: 502                                   # mandatory
          profile: 
            ipv4_gw: 192.165.2.1/24                      # mandatory
        reverse_next_hop: 192.165.2.100                  # mandatory

      - name: IT-ADC-RP6
        node_name: "{{ ansible_snode_2 }}"               # mandatory
        deploy_mode: one_arm_adc                         # mandatory, choices=[one_arm_adc, two_arm_adc]
        peering_option: static                           # optional, default is static, choices=[static, ebgp]
        first_arm: 
          vrf: "{{ ansible_vrf_41 }}"                    # mandatory
          name: rp6-sn2-first-arm                        # mandatory
          vlan_id: 601                                   # mandatory
          profile: 
            ipv4_gw: 192.166.2.1/24                      # mandatory
        reverse_next_hop: 192.166.2.100                  # mandatory

- assert:
    that:
    - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

###############################################
###      MERGE FEATURE_PBR POLICY            ##
###############################################

- name: Create feature_pbr policy
  cisco.dcnm.dcnm_policy:
    fabric: "{{ ansible_it_fabric }}"
    config:
      - name: feature_pbr  # This must be a valid template name
        create_additional_policy: false  # Do not create a policy if it already exists
        priority: 101

      - switch:
          - ip: "{{ ansible_switch1 }}"
    deploy: true
    state: merged
  register: result

- assert:
    that:
    - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- name: Initialize the setup - sleep for 180 seconds for DCNM to completely update the state
  wait_for:
    timeout: 180
