##############################################
##               SETUP                      ##
##############################################

- name: Remove local log file
  local_action: command rm -f policy.log

- name: Put the fabric to default state
  cisco.dcnm.dcnm_policy:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted                     # only choose form [merged, deleted, query]
    config:
      - name: my_base_ospf  # name is mandatory
      - switch:
          - ip: "{{ ansible_switch1 }}"
  register: result

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'


- block:

##############################################
##                MERGE                     ##
##############################################

    - name: Create policy without including required variables
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        deploy: true
        state: merged
        config:
          - name: my_base_ospf  # This must be a valid template name
            create_additional_policy: true  # Do not create a policy if it already exists
            priority: 101

          - switch:
              - ip: "{{ ansible_switch1 }}"
      register: result
      ignore_errors: yes

    # Assert for Create responses
    - assert:
        that:
          - 'result["msg"]["RETURN_CODE"] != 200'
          - '"OSPF_TAG" in result["msg"]["DATA"]["failureList"][0]["message"]'
          - '"LOOPBACK_IP" in result["msg"]["DATA"]["failureList"][0]["message"]'

    - name: Create multiple policies including required variables with the same template
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        deploy: true
        state: merged
        config:
          - name: my_base_ospf  # This must be a valid template name
            create_additional_policy: true
            priority: 101
            policy_vars:
              OSPF_TAG: 2000
              LOOPBACK_IP: 10.122.84.108

          - name: my_base_ospf  # This must be a valid template name
            create_additional_policy: true
            priority: 101
            policy_vars:
              OSPF_TAG: 2000
              LOOPBACK_IP: 10.122.84.108

          - switch:
              - ip: "{{ ansible_switch1 }}"
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 2'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 2'

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Success" in item["DATA"]["successList"][0]["status"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 2'
      when: (my_idx == (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Create additional policies including required variables with the same template but different priority and description
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        deploy: true
        state: merged
        config:
          - name: my_base_ospf  # This must be a valid template name
            create_additional_policy: false
            priority: 111
            description: "Changed description - 1"
            policy_vars:
              OSPF_TAG: 2000
              LOOPBACK_IP: 10.122.84.108

          - name: my_base_ospf  # This must be a valid template name
            create_additional_policy: false
            priority: 121
            description: "Changed description - 2"
            policy_vars:
              OSPF_TAG: 2000
              LOOPBACK_IP: 10.122.84.108

          - switch:
              - ip: "{{ ansible_switch1 }}"
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 2'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 2'

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Success" in item["DATA"]["successList"][0]["status"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) >= 2'
      when: (my_idx == (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Setting fact
      set_fact:
        mergev_policy_list: "{{ (mergev_policy_list | default([])) + [item['DATA']['successList'][0]['message'].split(' ')[0]] }}"
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Show the policy_list information
      debug:
        var: mergev_policy_list

    - name: Setting fact
      set_fact:
        list_len: "{{ mergev_policy_list | length }}"

    - name: Modify policy with variables - using policy IDs
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        state: merged
        config:
          - name: "{{ item }}"  # Pick the policy Ids from the facts
            description: Modified the policy "{{ item }}" using policy ID
            priority: "{{ 100 + my_idx }}"
            policy_vars:
              OSPF_TAG: 2000
              LOOPBACK_IP: 10.122.84.109

          - switch:
              - ip: "{{ ansible_switch1 }}"

      loop: '{{ mergev_policy_list }}'
      loop_control:
        index_var: my_idx
      register: result

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
      when: (my_idx < (result.results[0]["diff"][0]["merged"] | length))
      loop: '{{ result.results[0].response }}'
      loop_control:
        index_var: my_idx

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 1'
      when: (my_idx == (result.results[0]["diff"][0]["merged"] | length))
      loop: '{{ result.results[0].response }}'
      loop_control:
        index_var: my_idx

##############################################
##                CLEANUP                   ##
##############################################

  always:

    - name: Delete all created policies
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        state: deleted                     # only choose form [merged, deleted, query]
        config:
          - name: my_base_ospf  # This can either be a policy name like POLICY-xxxxx or template name
          - switch:
             - ip: "{{ ansible_switch1 }}"
      register: result

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - 'item["MESSAGE"] == "OK"'
      loop: '{{ result.response }}'
