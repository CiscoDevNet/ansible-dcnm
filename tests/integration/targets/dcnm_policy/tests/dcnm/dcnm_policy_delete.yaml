##############################################
##               SETUP                      ##
##############################################

- name: Put the fabric to default state
  cisco.dcnm.dcnm_policy:
    fabric: "{{ ansible_it_fabric }}"
    state: deleted                     # only choose form [merged, deleted, query]
    config:
      - name: template_101  # name is mandatory
      - name: template_102  # name is mandatory
      - name: template_103  # name is mandatory
      - name: template_104  # name is mandatory
      - name: template_105  # name is mandatory
      - switch:
          - ip: "{{ ansible_switch1 }}"
  register: result

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'

- block:

##############################################
##                DELETE                    ##
##############################################

    - name: Create policies
      cisco.dcnm.dcnm_policy: &create_pol
        fabric: "{{ ansible_it_fabric }}"
        state: merged
        config:
          - name: template_101  # name is mandatory

          - name: template_102  # name is mandatory

          - name: template_103  # name is mandatory

          - name: template_104  # name is mandatory

          - name: template_105  # name is mandatory

          - switch:
              - ip: "{{ ansible_switch1 }}"

      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 5'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 5'

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"is created successfully" in item["DATA"]["successList"][0]["message"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 5'
      when: (my_idx == (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Delete policies - using template names
      cisco.dcnm.dcnm_policy: &del_pol
        fabric: "{{ ansible_it_fabric }}"
        state: deleted
        config:
          - name: template_101  # name is mandatory

          - name: template_102  # name is mandatory

          - name: template_103  # name is mandatory

          - name: template_104  # name is mandatory

          - name: template_105  # name is mandatory

          - switch:
              - ip: "{{ ansible_switch1 }}"

      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 5'
          - '(result["diff"][0]["query"] | length) == 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - 'item["MESSAGE"] == "OK"'
      loop: '{{ result.response }}'

    - name: Delete policies - Idempotence
      cisco.dcnm.dcnm_policy: *del_pol
      register: result

    - assert:
        that:
          - 'result.changed == false'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - 'item["MESSAGE"] == "OK"'
      when: (my_idx < (result["diff"][0]["deleted"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - 'item["MESSAGE"] == "OK"'
      when: (my_idx == (result["diff"][0]["deleted"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"Deleted successfully" in item["DATA"]["message"]'
      when: (my_idx > (result["diff"][0]["deleted"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Create policies - again
      cisco.dcnm.dcnm_policy: *create_pol
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 5'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 5'

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"is created successfully" in item["DATA"]["successList"][0]["message"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 5'
      when: (my_idx == (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Setting fact
      set_fact:
        del_policy_list: "{{ (del_policy_list | default([])) + [item['DATA']['successList'][0]['message'].split(' ')[0]] }}"
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Show the policy_list information
      debug:
        var: del_policy_list

    - name: Setting fact
      set_fact:
        list_len: "{{ del_policy_list | length }}"

    - name: Delete policies - using policy IDs
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        state: deleted
        config:
          - name: "{{ item }}"  # Pick the policy Ids from the facts
          - switch:
              - ip: "{{ ansible_switch1 }}"

      loop: '{{ del_policy_list }}'
      register: result

    - assert:
        that:
          - 'item.changed == true'
          - '(item["diff"][0]["merged"] | length) == 0'
          - '(item["diff"][0]["deleted"] | length) == 1'
          - '(item["diff"][0]["query"] | length) == 0'
          - 'item["response"][0]["RETURN_CODE"] == 200'
          - 'item["response"][1]["MESSAGE"] == "OK"'
      when: (my_idx < (list_len | int))
      loop: '{{ result["results"] }}'
      loop_control:
        index_var: my_idx

    - name: Create multiple policies for a template
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        state: merged
        config:
          - name: template_101  # name is mandatory
            create_additional_policy: true  # Create a policy even if it already exists

          - name: template_101  # name is mandatory
            create_additional_policy: true  # Create a policy even if it already exists

          - switch:
              - ip: "{{ ansible_switch1 }}"

      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 2'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["query"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 2'

    # Assert for Create responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '"is created successfully" in item["DATA"]["successList"][0]["message"]'
      when: (my_idx < (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    # Assert for deploy responses
    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - '(item["DATA"][0]["successPTIList"].split(",") | length) == 2'
      when: (my_idx == (result["diff"][0]["merged"] | length))
      loop: '{{ result.response }}'
      loop_control:
        index_var: my_idx

    - name: Delete all matching policies using template name
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        state: deleted                     # only choose form [merged, deleted, query]
        config:
          - name: template_101  # This can either be a policy name like POLICY-xxxxx or template name
          - switch:
             - ip: "{{ ansible_switch1 }}"
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 2'
          - '(result["diff"][0]["query"] | length) == 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - 'item["MESSAGE"] == "OK"'
      loop: '{{ result.response }}'

##############################################
##                CLEANUP                   ##
##############################################

  always:

    - name: Delete all created policies
      cisco.dcnm.dcnm_policy:
        fabric: "{{ ansible_it_fabric }}"
        state: deleted                     # only choose form [merged, deleted, query]
        config:
          - name: template_101  # This can either be a policy name like POLICY-xxxxx or template name
          - name: template_102  # This can either be a policy name like POLICY-xxxxx or template name
          - name: template_103  # This can either be a policy name like POLICY-xxxxx or template name
          - name: template_104  # This can either be a policy name like POLICY-xxxxx or template name
          - name: template_105  # This can either be a policy name like POLICY-xxxxx or template name
          - switch:
             - ip: "{{ ansible_switch1 }}"
      register: result

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'
          - 'item["MESSAGE"] == "OK"'
      loop: '{{ result.response }}'
