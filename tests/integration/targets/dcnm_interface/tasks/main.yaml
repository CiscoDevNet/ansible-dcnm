---
- name: collect dcnm test cases
  find:
    paths: "{{ role_path }}/tests/dcnm"
    patterns: "{{ testcase }}.yaml"
  connection: local
  register: dcnm_cases
  tags: sanity

- set_fact:
    test_cases:
      files: "{{ dcnm_cases.files }}"
  tags: sanity

- name: set test_items
  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
  tags: sanity

- name: run test cases (connection=httpapi)
  ansible.builtin.include_tasks: "{{ test_case_to_run }}"
  with_items: "{{ test_items }}"
  loop_control:
    loop_var: test_case_to_run
  tags: sanity

- meta: end_play

###############################################
##                FACTS                      ##
###############################################
- set_fact:
    vpc_delete_path: {}

- set_fact:
    vpc_delete_path: "{{ vpc_delete_path | combine (item) }}"
  with_items:
    - {'12': '/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/vpcpair?serialNumber='}
    - {'11': '/rest/vpcpair?serialNumber='}

##############################################
##          DELETE VXLAN VPC PAIR           ##
##############################################
- name: Final Cleanup - Delete DCNM VXLAN Fabric VPC switch pair
  cisco.dcnm.dcnm_rest:
    method: DELETE
    path: "{{ [vpc_delete_path[controller_version], test_data_common.vxlan_fabric_sno1] | join ('') }}"
  register: result
  ignore_errors: true
  when: (test_data_common.vxlan_fabric is defined and test_data_common.vxlan_fabric_sno1 is defined and test_data_common.vxlan_fabric_sno2 is defined)

- name: Wait for 10 secs
  wait_for:
    timeout: 10
  when: (test_data_common.vxlan_fabric is defined and test_data_common.vxlan_fabric_sno1 is defined and test_data_common.vxlan_fabric_sno2 is defined)

##############################################
##          CONFIG SAVE                     ##
##############################################

- name: Config Save
  cisco.dcnm.dcnm_rest:
    method: POST
    path: "{{ vxlan_config_save_path[controller_version] }}"
  register: result
  when: (test_data_common.vxlan_fabric is defined and test_data_common.vxlan_fabric_sno1 is defined and test_data_common.vxlan_fabric_sno2 is defined)
  ignore_errors: true

##############################################
##          DEPLOY VXLAN VPC PAIR           ##
##############################################

- name: Final Cleanup - Deploy DCNM VXLAN Fabric VPC switch pair
  cisco.dcnm.dcnm_rest:
    method: POST
    path: "{{ vpc_vxlan_deploy_path[controller_version] }}"
  register: result
  with_sequence: count=1
  loop_control:
    pause: 5
  ignore_errors: true
  when: (test_data_common.vxlan_fabric is defined and test_data_common.vxlan_fabric_sno1 is defined and test_data_common.vxlan_fabric_sno2 is defined)

##############################################
##          DELETE CXT VPC PAIR             ##
##############################################
- name: Final Cleanup - Delete DCNM CXT Fabric VPC switch pair
  cisco.dcnm.dcnm_rest:
    method: DELETE
    path: "{{ [vpc_delete_path[controller_version], test_data_common.cxt_fabric_sno1] | join ('') }}"
  register: result
  ignore_errors: true
  when: (test_data_common.cxt_fabric is defined and test_data_common.cxt_fabric_sno1 is defined and test_data_common.cxt_fabric_sno2 is defined)

- name: Wait for 10 secs
  wait_for:
    timeout: 10
  when: (test_data_common.cxt_fabric is defined and test_data_common.cxt_fabric_sno1 is defined and test_data_common.cxt_fabric_sno2 is defined)

##############################################
##          CONFIG SAVE                     ##
##############################################

- name: Config Save
  cisco.dcnm.dcnm_rest:
    method: POST
    path: "{{ cxt_config_save_path[controller_version] }}"
  register: result
  when: (test_data_common.cxt_fabric is defined and test_data_common.cxt_fabric_sno1 is defined and test_data_common.cxt_fabric_sno2 is defined)
  ignore_errors: true

##############################################
##          DEPLOY CXT VPC PAIR             ##
##############################################

- name: Final Cleanup - Deploy DCNM CXT Fabric VPC switch pair
  cisco.dcnm.dcnm_rest:
    method: POST
    path: "{{ vpc_cxt_deploy_path[controller_version] }}"
  register: result
  with_sequence: count=1
  loop_control:
    pause: 5
  ignore_errors: true
  when: (test_data_common.cxt_fabric is defined and test_data_common.cxt_fabric_sno1 is defined and test_data_common.cxt_fabric_sno2 is defined)

- name: Final Cleanup - delete my_vpc my_lacp my_interface_vlan and my_hsrp policies that we created during init
  cisco.dcnm.dcnm_policy:
    fabric: "{{ test_data_common.fabric }}"
    state: deleted                     # only choose form [merged, deleted, query]
    config:
      - name: my_interface_vlan
      - name: my_hsrp
      - name: my_lacp
      - name: my_vpc
      - switch:
          - ip: "{{ test_data_common.switch1 }}"
          - ip: "{{ test_data_common.switch2 }}"
  register: result
  tags: sanity

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'
  tags: sanity

##############################################
##          DELETE ALL TEMPLATES            ##
##############################################
- name: Final Cleanup - delete all templates created during init
  cisco.dcnm.dcnm_template:
    state: deleted       # only choose form [merged, deleted, query]
    config:
      - name: my_interface_vlan
      - name: my_hsrp
      - name: my_lacp
      - name: my_vpc
  register: result
  tags: sanity

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'
  loop: '{{ result.response }}'
  tags: sanity