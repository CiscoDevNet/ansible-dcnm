##############################################
##               SETUP                      ##
##############################################

- name: Remove local log file
  local_action: command rm -f dcnm_intf.log

- name: Put the fabric to default state
  cisco.dcnm.dcnm_interface:
    check_deploy: True
    fabric: "{{ ansible_it_fabric }}" 
    state: overridden                     # only choose form [merged, replaced, deleted, overridden, query]
  register: result  

- assert:
    that:
      - 'item["RETURN_CODE"] == 200'  
  loop: '{{ result.response }}'

- block:

##############################################
##                MERGE                     ##
##############################################
    - name: Create interfaces to check various delete form 1
      cisco.dcnm.dcnm_interface:
        check_deploy: True
        fabric: "{{ ansible_it_fabric }}" 
        state: merged                         # only choose form [merged, replaced, deleted, overridden, query]
        config:
          - name: po333                       # should be of the form po<port-id>
            type: pc                          # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
            deploy: true                      # choose from [true, false]
            profile:
              mode: trunk                     # choose from [trunk, access, l3, monitor]

          - name: "{{ ansible_sub_intf1 }}"   # should be of the form eth<port-num>.<port-id>
            type: sub_int                     # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
            deploy: true                      # choose from [true, false]
            profile:
              mode: subint                    # choose from [subint]
              vlan: 100                       # vlan ID [min:2, max:3967]
              ipv4_addr: 192.168.1.1          # ipv4 address for the sub-interface
              ipv4_mask_len: 24               # choose between [min:8, max:31]

          - name: lo100                       # should be of the form lo<port-id>
            type: lo                          # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch where to deploy the config
            deploy: true                      # choose from [true, false]
            profile:
              mode: lo                        # choose from [lo]
              ipv4_addr: 193.168.2.1          # ipv4 address for the loopback interface

          - name: vpc100                      # should be of the form vpc<port-id>
            type: vpc                         # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:                           # provide switches of vPC pair
              - "{{ ansible_switch1 }}"
              - "{{ ansible_switch2 }}"
            deploy: true                      # choose from [true, false]
            profile:
              admin_state: true               # choose from [true, false]
              mode: trunk                     # choose from [trunk, access]
              peer1_pcid: 210                 # choose between [Min:1, Max:4096], if not given, will be VPC port-id
              peer2_pcid: 210                 # choose between [Min:1, Max:4096], if not given, will be VPC port-id
              peer1_members:                  # member interfaces on peer 1
                - "{{ ansible_eth_intf6 }}"
              peer2_members:                  # member interfaces on peer 2
                - "{{ ansible_eth_intf6 }}"
              pc_mode: 'active'               # choose from ['on', 'active', 'passive']
              bpdu_guard: true                # choose from [true, false, 'no']
              port_type_fast: true            # choose from [true, false]
              mtu: jumbo                      # choose from [default, jumbo]
              peer1_allowed_vlans: none       # choose from [none, all, vlan range] 
              peer2_allowed_vlans: none       # choose from [none, all, vlan range] 
              peer1_description: "VPC acting as trunk peer1"
              peer2_description: "VPC acting as trunk peer2"
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 4'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["replaced"] | length) == 0'
          - '(result["diff"][0]["overridden"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 4'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##              DELETE                      ##
##############################################

    - name: Delete all interfaces form 1
      cisco.dcnm.dcnm_interface:
        check_deploy: True
        fabric: "{{ ansible_it_fabric }}" 
        state: deleted                        # only choose form [merged, replaced, deleted, overridden,query]
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 4'
          - '(result["diff"][0]["replaced"] | length) != 0'
          - '(result["diff"][0]["overridden"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) != 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##                MERGE                     ##
##############################################

    - name: Create all interfaces to check delete form 2
      cisco.dcnm.dcnm_interface:
        check_deploy: True
        fabric: "{{ ansible_it_fabric }}" 
        state: merged                         # only choose form [merged, replaced, deleted, overridden, query]
        config:
          - name: po333                       # should be of the form po<port-id>
            type: pc                          # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
            deploy: true                      # choose from [true, false]
            profile:
              mode: trunk                     # choose from [trunk, access, l3, monitor]

          - name: "{{ ansible_sub_intf1 }}"   # should be of the form eth<port-num>.<port-id>
            type: sub_int                     # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
            deploy: true                      # choose from [true, false]
            profile:
              mode: subint                    # choose from [subint]
              vlan: 100                       # vlan ID [min:2, max:3967]
              ipv4_addr: 192.168.1.1          # ipv4 address for the sub-interface
              ipv4_mask_len: 24               # choose between [min:8, max:31]

          - name: lo100                       # should be of the form lo<port-id>
            type: lo                          # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch where to deploy the config
            deploy: true                      # choose from [true, false]
            profile:
              mode: lo                        # choose from [lo]
              ipv4_addr: 193.168.2.1          # ipv4 address for the loopback interface

          - name: vpc101                      # should be of the form vpc<port-id>
            type: vpc                         # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:                           # provide switches of vPC pair
              - "{{ ansible_switch1 }}"
              - "{{ ansible_switch2 }}"
            deploy: true                      # choose from [true, false]
            profile:
              admin_state: true               # choose from [true, false]
              mode: trunk                     # choose from [trunk, access]
              peer1_pcid: 211                 # choose between [Min:1, Max:4096], if not given, will be VPC port-id
              peer2_pcid: 211                 # choose between [Min:1, Max:4096], if not given, will be VPC port-id
              peer1_members:                  # member interfaces on peer 1
                - "{{ ansible_eth_intf6 }}"
              peer2_members:                  # member interfaces on peer 2
                - "{{ ansible_eth_intf6 }}"
              pc_mode: 'active'               # choose from ['on', 'active', 'passive']
              bpdu_guard: true                # choose from [true, false, 'no']
              port_type_fast: true            # choose from [true, false]
              mtu: jumbo                      # choose from [default, jumbo]
              peer1_allowed_vlans: none       # choose from [none, all, vlan range] 
              peer2_allowed_vlans: none       # choose from [none, all, vlan range] 
              peer1_description: "VPC acting as trunk peer1"
              peer2_description: "VPC acting as trunk peer2"
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 4'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["replaced"] | length) == 0'
          - '(result["diff"][0]["overridden"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 4'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##              DELETE                      ##
##############################################

    - name: Delete all interfaces form 2
      cisco.dcnm.dcnm_interface:
        check_deploy: True
        fabric: "{{ ansible_it_fabric }}" 
        state: deleted                        # only choose form [merged, replaced, deleted, overridden,query]
        config:
          - switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
              - "{{ ansible_switch1 }}"
              - "{{ ansible_switch2 }}"       # provide the switch where to deploy the config
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 4'
          - '(result["diff"][0]["replaced"] | length) != 0'
          - '(result["diff"][0]["overridden"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) != 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##                MERGE                     ##
##############################################

    - name: Create all interfaces to check delete form 3
      cisco.dcnm.dcnm_interface:
        check_deploy: True
        fabric: "{{ ansible_it_fabric }}" 
        state: merged                         # only choose form [merged, replaced, deleted, overridden, query]
        config:
          - name: po333                       # should be of the form po<port-id>
            type: pc                          # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
            deploy: true                      # choose from [true, false]
            profile:
              mode: trunk                     # choose from [trunk, access, l3, monitor]

          - name: "{{ ansible_sub_intf1 }}"   # should be of the form eth<port-num>.<port-id>
            type: sub_int                     # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
            deploy: true                      # choose from [true, false]
            profile:
              mode: subint                    # choose from [subint]
              vlan: 100                       # vlan ID [min:2, max:3967]
              ipv4_addr: 192.168.1.1          # ipv4 address for the sub-interface
              ipv4_mask_len: 24               # choose between [min:8, max:31]

          - name: lo100                       # should be of the form lo<port-id>
            type: lo                          # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch where to deploy the config
            deploy: true                      # choose from [true, false]
            profile:
              mode: lo                        # choose from [lo]
              ipv4_addr: 193.168.2.1          # ipv4 address for the loopback interface

          - name: vpc102                      # should be of the form vpc<port-id>
            type: vpc                         # choose from this list [pc, vpc, sub_int, lo, eth, svi]
            switch:                           # provide switches of vPC pair
              - "{{ ansible_switch1 }}"
              - "{{ ansible_switch2 }}"
            deploy: true                      # choose from [true, false]
            profile:
              admin_state: true               # choose from [true, false]
              mode: trunk                     # choose from [trunk, access]
              peer1_pcid: 212                 # choose between [Min:1, Max:4096], if not given, will be VPC port-id
              peer2_pcid: 212                 # choose between [Min:1, Max:4096], if not given, will be VPC port-id
              peer1_members:                  # member interfaces on peer 1
                - "{{ ansible_eth_intf6 }}"
              peer2_members:                  # member interfaces on peer 2
                - "{{ ansible_eth_intf6 }}"
              pc_mode: 'active'               # choose from ['on', 'active', 'passive']
              bpdu_guard: true                # choose from [true, false, 'no']
              port_type_fast: true            # choose from [true, false]
              mtu: jumbo                      # choose from [default, jumbo]
              peer1_allowed_vlans: none       # choose from [none, all, vlan range] 
              peer2_allowed_vlans: none       # choose from [none, all, vlan range] 
              peer1_description: "VPC acting as trunk peer1"
              peer2_description: "VPC acting as trunk peer2"
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 4'
          - '(result["diff"][0]["deleted"] | length) == 0'
          - '(result["diff"][0]["replaced"] | length) == 0'
          - '(result["diff"][0]["overridden"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 4'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##              DELETE                      ##
##############################################

    - name: Delete all interfaces form 3
      cisco.dcnm.dcnm_interface:
        check_deploy: True
        fabric: "{{ ansible_it_fabric }}" 
        state: deleted                        # only choose form [merged, replaced, deleted, overridden,query]
        config:
          - name: po333
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
          - name: "{{ ansible_sub_intf1 }}"   # should be of the form eth<port-num>.<port-id>
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch information where the config is to be deployed
          - name: lo100                       # should be of the form lo<port-id>
            switch:
              - "{{ ansible_switch1 }}"       # provide the switch where to deploy the config
          - name: vpc102                      # should be of the form vpc<port-id>
            switch:
              - "{{ ansible_switch1 }}"
              - "{{ ansible_switch2 }}"       # provide the switch where to deploy the config
      register: result

    - assert:
        that:
          - 'result.changed == true'
          - '(result["diff"][0]["merged"] | length) == 0'
          - '(result["diff"][0]["deleted"] | length) == 4'
          - '(result["diff"][0]["replaced"] | length) == 0'
          - '(result["diff"][0]["overridden"] | length) == 0'
          - '(result["diff"][0]["deploy"] | length) == 0'

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##             CLEANUP                      ##
##############################################

  always:

    - name: Put fabric to default state
      cisco.dcnm.dcnm_interface:
        check_deploy: True
        fabric: "{{ ansible_it_fabric }}" 
        state: overridden                     # only choose form [merged, replaced, deleted, overridden, query]
      register: result
      when: IT_CONTEXT is not defined

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'
      when: IT_CONTEXT is not defined
