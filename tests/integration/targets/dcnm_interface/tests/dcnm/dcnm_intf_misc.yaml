##############################################
##               SETUP                      ##
##############################################

- name: Remove local log file
  local_action: command rm -f dcnm_intf.log

- name: Put the fabric to default state
  cisco.dcnm.dcnm_interface:
    check_deploy: "{{ test_data_common.check_deploy | bool }}"
    fabric: "{{ test_data_common.fabric }}"
    state: overridden                     # only choose form [merged, replaced, deleted, overridden, query]
  register: result  

- name: ASSERT - Check return codes for setup
  assert:
    that:
      - 'item["RETURN_CODE"] == 200'  
  loop: '{{ result.response }}'

- block:

##############################################
##             SETUP VARS                   ##
##############################################

    - name: Setup Internal TestCase Variables
      ansible.builtin.set_fact:
        test_data_interfaces:
          misc_merge_conf_template: "templates/dcnm_intf/misc_merge_conf.j2"
          misc_merge_conf_file: "{{ role_path }}/files/dcnm_interface_intf_misc_merge_conf.yaml"
          misc_delete_no_deploy_conf_template: "templates/dcnm_intf/misc_delete_no_deploy_conf.j2"
          misc_delete_no_deploy_conf_file: "{{ role_path }}/files/dcnm_interface_intf_misc_delete_no_deploy_conf.yaml"
          misc_delete_conf_template: "templates/dcnm_intf/misc_delete_conf.j2"
          misc_delete_conf_file: "{{ role_path }}/files/dcnm_interface_intf_misc_delete_conf.yaml"
          misc_monitoring_mode_conf_template: "templates/dcnm_intf/misc_monitoring_mode_conf.j2"
          misc_monitoring_mode_conf_file: "{{ role_path }}/files/dcnm_interface_intf_misc_monitoring_mode_conf.yaml"
          misc_non_manageable_conf_template: "templates/dcnm_intf/misc_non_manageable_conf.j2"
          misc_non_manageable_conf_file: "{{ role_path }}/files/dcnm_interface_intf_misc_non_manageable_conf.yaml"
      delegate_to: localhost

    - name: Create Interface Config Files using J2 Templates
      ansible.builtin.template:
        src: "{{ test_data_interfaces[item ~ '_conf_template'] }}"
        dest: "{{ test_data_interfaces[item ~ '_conf_file'] }}"
      with_items:
        - misc_merge
        - misc_delete_no_deploy
        - misc_delete
        - misc_monitoring_mode
        - misc_non_manageable
      delegate_to: localhost

##############################################
##                MERGE                     ##
##############################################

    - name: Load Interface Config File
      ansible.builtin.set_fact:
        dcnm_interface_misc_merge_conf: "{{ lookup('file', test_data_interfaces.misc_merge_conf_file) | from_yaml }}"
      delegate_to: localhost

    - name: Create interfaces to check delete with deploy and no deploy
      cisco.dcnm.dcnm_interface:
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "{{ test_data_common.fabric }}"
        state: merged                         # only choose form [merged, replaced, deleted, overridden, query]
        config: "{{ dcnm_interface_misc_merge_conf }}"
      register: result

    - name: ASSERT - Check changed flag is true and return codes
      assert:
        that:
          - 'result.changed == true'
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

    - name: QUERY - Get interface state in NDFC
      cisco.dcnm.dcnm_interface:
        state: query
        fabric: "{{ test_data_common.fabric }}"
        config: "{{ dcnm_interface_misc_merge_conf }}"
      register: verify_result

    - name: VALIDITY CHECK - Verify interface state in NDFC
      cisco.dcnm.tests.integration.ndfc_interface_validate:
        config_path: "{{ test_data_interfaces.misc_merge_conf_file }}"
        ndfc_data: "{{ verify_result }}"
        test_data: "{{ test_data_common }}"
        switch_ip_sn_mapping: "{{ test_data_common.sw_sn }}"
      delegate_to: localhost

##############################################
##                DELETE                    ##
##############################################

    - name: Load Delete No Deploy Interface Config File
      ansible.builtin.set_fact:
        dcnm_interface_misc_delete_no_deploy_conf: "{{ lookup('file', test_data_interfaces.misc_delete_no_deploy_conf_file) | from_yaml }}"
      delegate_to: localhost

    - name: Delete interface with deploy set to False
      cisco.dcnm.dcnm_interface:
        fabric: "{{ test_data_common.fabric }}"
        state: deleted                        # only choose form [merged, replaced, deleted, overridden, query]
        config: "{{ dcnm_interface_misc_delete_no_deploy_conf }}"
      register: result

    - name: ASSERT - Check changed flag is true and return codes
      assert:
        that:
          - 'result.changed == true'
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##                DELETE                    ##
##############################################

    - name: Load Delete Interface Config File
      ansible.builtin.set_fact:
        dcnm_interface_misc_delete_conf: "{{ lookup('file', test_data_interfaces.misc_delete_conf_file) | from_yaml }}"
      delegate_to: localhost

    - name: Delete interface (already marked deleted) with deploy set to True
      cisco.dcnm.dcnm_interface:
        fabric: "{{ test_data_common.fabric }}"
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        state: deleted                        # only choose form [merged, replaced, deleted, overridden, query]
        config: "{{ dcnm_interface_misc_delete_conf }}"
      register: result

    - name: ASSERT - Check changed flag is true and return codes
      assert:
        that:
          - 'result.changed == true'
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'

##############################################
##                DELETE                    ##
##############################################

    - name: Delete interface again (already deployed) with deploy set to True
      cisco.dcnm.dcnm_interface:
        fabric: "{{ test_data_common.fabric }}"
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        state: deleted                        # only choose form [merged, replaced, deleted, overridden, query]
        config: "{{ dcnm_interface_misc_delete_conf }}"
      register: result

    - name: ASSERT - Check changed flag is false and return codes for idempotence
      assert:
        that:
          - 'result.changed == false'
          - 'result.response is defined'
          - 'result.response | length >= 0'  # Allow empty response for idempotence
      # Don't loop over response items for idempotence check as they may be empty

##############################################
##                MERGE                     ##
##############################################

    - name: Load Monitoring Mode Interface Config File
      ansible.builtin.set_fact:
        dcnm_interface_misc_monitoring_mode_conf: "{{ lookup('file', test_data_interfaces.misc_monitoring_mode_conf_file) | from_yaml }}"
      delegate_to: localhost

    - name: Create interfaces with src fabric in monitoring mode
      cisco.dcnm.dcnm_interface:
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "{{ test_data_common.ext_fabric }}"
        state: merged                         # only choose form [merged, replaced, deleted, overridden, query]
        config: "{{ dcnm_interface_misc_monitoring_mode_conf }}"
      register: result
      ignore_errors: yes

    # - assert:
    #     that:
    #       - '("Monitoring mode" in result["msg"])'
    #       - '("No changes are allowed on the fabric" in result["msg"])'
    #       - '("{{ test_data_common.ext_fabric }}" in result["msg"])'

##############################################
##                MERGE                     ##
##############################################

    - name: Load Non-Manageable Interface Config File
      ansible.builtin.set_fact:
        dcnm_interface_misc_non_manageable_conf: "{{ lookup('file', test_data_interfaces.misc_non_manageable_conf_file) | from_yaml }}"
      delegate_to: localhost

    - name: Create interface on a switch that is not 'managable'.
      cisco.dcnm.dcnm_interface:
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "mmudigon-unnumbered"
        state: merged                         # only choose form [merged, replaced, deleted, overridden, query]
        config: "{{ dcnm_interface_misc_non_manageable_conf }}"
      register: result
      ignore_errors: yes

    # - assert:
    #     that:
    #       - '("are not managable in Fabric" in result["msg"])'
    #       - '("No changes are allowed on these switches" in result["msg"])'
    #       - '("n9kv-test-sw2" in result["msg"])'

##############################################
##             CLEANUP                      ##
##############################################

  always:

    - name: Put fabric to default state
      cisco.dcnm.dcnm_interface:
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "{{ test_data_common.fabric }}"
        state: overridden                     # only choose form [merged, replaced, deleted, overridden, query]
      register: result
      when: IT_CONTEXT is not defined

    - name: ASSERT - Check return codes for cleanup
      assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'
      when: IT_CONTEXT is not defined
