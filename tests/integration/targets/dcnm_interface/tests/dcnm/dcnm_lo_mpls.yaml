##############################################
##               SETUP                      ##
##############################################

# This test file specfically validates fabric loopback
# interfaces that are created at fabric creation time
# for VXLAN-EVPN to SR-MPLS and MPLS LDP interconnection

# By default they are loopback101 as defined in the fabric
# settings and use the ndfc profile 'int_mpls_loopback'

- name: Remove local log file
  local_action: command rm -f dcnm_intf.log

- name: Save Data For Loopback101
  cisco.dcnm.dcnm_interface:
    check_deploy: "{{ test_data_common.check_deploy | bool }}"
    fabric: "{{ test_data_common.fabric }}"
    state: query
    config:
      - name: lo101
        switch:
          - "{{ test_data_common.switch1 }}"
  register: lpk101_data

- name: Set Test Control Flag
  ansible.builtin.set_fact:
    run_test: True

- name: Test will not be run since Loopback101 does not appear to exist
  ansible.builtin.set_fact:
    run_test: False
  when: lpk101_data.response == []

- name: Access Policy Data If Loopack101 Data Is Available
  ansible.builtin.set_fact:
    loopback_policy: "{{ lpk101_data.response[0]['policy'] }}"
  when: lpk101_data.response != []

- name: Test will not be run since Loopback101 is not an MPLS Fabric Loopback
  ansible.builtin.set_fact:
    run_test: False
  when: (loopback_policy is defined) and (loopback_policy != 'int_mpls_loopback')

- debug: msg="Loopback 101 Data - {{ lpk101_data.response[0]['interfaces'][0]['nvPairs'] }}"
  when: run_test

- block:

##############################################
##             SETUP VARS                   ##
##############################################

    - name: Setup Internal TestCase Variables
      ansible.builtin.set_fact:
        test_data_interfaces:
          mpls_lo101_replace_conf_template: "templates/dcnm_lo/mpls_lo101_replace_conf.j2"
          mpls_lo101_replace_conf_file: "{{ role_path }}/files/dcnm_interface_lo_mpls_lo101_replace_conf.yaml"
          mpls_lo201_merge_conf_template: "templates/dcnm_lo/mpls_lo201_merge_conf.j2"
          mpls_lo201_merge_conf_file: "{{ role_path }}/files/dcnm_interface_lo_mpls_lo201_merge_conf.yaml"
      delegate_to: localhost

    - name: Create Interface Config Files using J2 Templates
      ansible.builtin.template:
        src: "{{ test_data_interfaces[item ~ '_conf_template'] }}"
        dest: "{{ test_data_interfaces[item ~ '_conf_file'] }}"
      with_items:
        - mpls_lo101_replace
        - mpls_lo201_merge
      delegate_to: localhost

##############################################
##                REPLACE                   ##
##############################################

    # Note: MPLS fabric loopback interfaces are created at fabric creation time
    # This test validates that we can modify them with the replace state

    - name: Load Replace Interface Config File
      ansible.builtin.set_fact:
        dcnm_interface_mpls_lo101_replace_conf: "{{ lookup('file', test_data_interfaces.mpls_lo101_replace_conf_file) | from_yaml }}"
      delegate_to: localhost

    - name: Replace MPLS fabric loopback interface (loopback101)
      cisco.dcnm.dcnm_interface: &lo_replace_lo101
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "{{ test_data_common.fabric }}"
        state: replaced
        config: "{{ dcnm_interface_mpls_lo101_replace_conf }}"
      register: result

    - name: ASSERT - Verify MPLS fabric loopback interface (loopback101) replace results
      assert:
        that:
          - 'result.changed == true'
          - 'item["RETURN_CODE"] == 200'
        fail_msg: "Replace operation for loopback101 failed - {{ result }}"
        success_msg: "Replace operation for loopback101 succeeded"
      loop: '{{ result.response }}'

    - name: QUERY - Get MPLS fabric loopback interface (loopback101) state in NDFC
      cisco.dcnm.dcnm_interface:
        state: query
        fabric: "{{ test_data_common.fabric }}"
        config: "{{ dcnm_interface_mpls_lo101_replace_conf }}"
      register: verify_result

    - name: VALIDITY CHECK - Verify MPLS fabric loopback interface (loopback101) state in NDFC
      cisco.dcnm.tests.integration.ndfc_interface_validate:
        config_path: "{{ test_data_interfaces.mpls_lo101_replace_conf_file }}"
        ndfc_data: "{{ verify_result }}"
        test_data: "{{ test_data_common }}"
        switch_ip_sn_mapping: "{{ test_data_common.sw_sn }}"
      delegate_to: localhost

    - name: Replace MPLS fabric loopback interface (loopback101) - Idempotence
      cisco.dcnm.dcnm_interface: *lo_replace_lo101
      register: result

    - name: ASSERT - Verify MPLS fabric loopback interface (loopback101) idempotence results
      assert:
        that:
          - 'result.changed == false'
          - 'result.response is defined'
          - 'result.response | length >= 0'  # Allow empty response for idempotence
        fail_msg: "Idempotence check for loopback101 failed - {{ result }}"
        success_msg: "Idempotence check for loopback101 succeeded"
      # Don't loop over response items for idempotence check as they may be empty

##############################################
##                MERGE                     ##
##############################################

    # Test that we can also create new MPLS loopback interfaces

    - name: Load Merge Interface Config File
      ansible.builtin.set_fact:
        dcnm_interface_mpls_lo201_merge_conf: "{{ lookup('file', test_data_interfaces.mpls_lo201_merge_conf_file) | from_yaml }}"
      delegate_to: localhost

    - name: Create new MPLS loopback interface (loopback201)
      cisco.dcnm.dcnm_interface: &lo_merge_lo201
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "{{ test_data_common.fabric }}"
        state: merged
        config: "{{ dcnm_interface_mpls_lo201_merge_conf }}"
      register: result

    - name: ASSERT - Verify MPLS loopback interface (loopback201) creation results
      assert:
        that:
          - 'result.changed == true'
          - 'item["RETURN_CODE"] == 200'
        fail_msg: "Creation of loopback201 failed - {{ result }}"
        success_msg: "Creation of loopback201 succeeded"
      loop: '{{ result.response }}'

    - name: QUERY - Get MPLS loopback interface (loopback201) state in NDFC
      cisco.dcnm.dcnm_interface:
        state: query
        fabric: "{{ test_data_common.fabric }}"
        config: "{{ dcnm_interface_mpls_lo201_merge_conf }}"
      register: verify_result

    - name: VALIDITY CHECK - Verify MPLS loopback interface (loopback201) state in NDFC
      cisco.dcnm.tests.integration.ndfc_interface_validate:
        config_path: "{{ test_data_interfaces.mpls_lo201_merge_conf_file }}"
        ndfc_data: "{{ verify_result }}"
        test_data: "{{ test_data_common }}"
        switch_ip_sn_mapping: "{{ test_data_common.sw_sn }}"
      delegate_to: localhost

    - name: Create new MPLS loopback interface (loopback201) - Idempotence
      cisco.dcnm.dcnm_interface: *lo_merge_lo201
      register: result

    - name: ASSERT - Verify MPLS loopback interface (loopback201) idempotence results
      assert:
        that:
          - 'result.changed == false'
          - 'result.response is defined'
          - 'result.response | length >= 0'  # Allow empty response for idempotence
        fail_msg: "Idempotence check for loopback201 failed - {{ result }}"
        success_msg: "Idempotence check for loopback201 succeeded"
      # Don't loop over response items for idempotence check as they may be empty

##############################################
##             DELETE                       ##
##############################################

    - name: Delete MPLS loopback interface (loopback201)
      cisco.dcnm.dcnm_interface: &lo_delete_lo201
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "{{ test_data_common.fabric }}"
        state: deleted
        config: "{{ dcnm_interface_mpls_lo201_merge_conf }}"
      register: result

    - name: ASSERT - Verify MPLS loopback interface (loopback201) deletion results
      assert:
        that:
          - 'result.changed == true'
          - 'item["RETURN_CODE"] == 200'
        fail_msg: "Deletion of loopback201 failed - {{ result }}"
        success_msg: "Deletion of loopback201 succeeded"
      loop: '{{ result.response }}'

    - name: QUERY - Get MPLS loopback interface (loopback201) state in NDFC (delete)
      cisco.dcnm.dcnm_interface:
        state: query
        fabric: "{{ test_data_common.fabric }}"
        config: "{{ dcnm_interface_mpls_lo201_merge_conf }}"
      register: verify_result

    - name: VALIDITY CHECK - Verify MPLS loopback interface (loopback201) is deleted
      cisco.dcnm.tests.integration.ndfc_interface_validate:
        config_path: "{{ test_data_interfaces.mpls_lo201_merge_conf_file }}"
        ndfc_data: "{{ verify_result }}"
        test_data: "{{ test_data_common }}"
        switch_ip_sn_mapping: "{{ test_data_common.sw_sn }}"
        check_deleted: true
      delegate_to: localhost

    - name: Delete MPLS loopback interface (loopback201) - Idempotence
      cisco.dcnm.dcnm_interface: *lo_delete_lo201
      register: result

    - name: ASSERT - Verify MPLS loopback interface (loopback201) deletion idempotence results
      assert:
        that:
          - 'result.changed == false'
          - 'result.response is defined'
          - 'result.response | length >= 0'  # Allow empty response for idempotence
        fail_msg: "Deletion idempotence check for loopback201 failed - {{ result }}"
        success_msg: "Deletion idempotence check for loopback201 succeeded"
      # Don't loop over response items for idempotence check as they may be empty

##############################################
##             CLEANUP                      ##
##############################################

  when: run_test

  always:

    - name: Put fabric to default state
      cisco.dcnm.dcnm_interface:
        check_deploy: "{{ test_data_common.check_deploy | bool }}"
        fabric: "{{ test_data_common.fabric }}"
        state: overridden
      register: result
      when: IT_CONTEXT is not defined

    - assert:
        that:
          - 'item["RETURN_CODE"] == 200'  
      loop: '{{ result.response }}'
      when: IT_CONTEXT is not defined
