################################################################################
# RUNTIME
################################################################################

# Recent run times (MM:SS.ms):
# 00:18.960
# 00:19.240
# 00:18.836
################################################################################
# STEPS
################################################################################

# SETUP
# 1. The following images must already be uploaded to the switches
#    See vars: section in cisco/dcnm/playbooks/dcnm_tests.yaml
#    - nxos_image_1 on spine1 and spine2
#    - nxos_image_2 on spine2 ONLY
# 2. No need for fabric
# 3. Query images under test, if they exist on all switches.
#    - nxos_image_1
#    - nxos_image_2
# CLEANUP
# 7. No cleanup required

################################################################################
# REQUIREMENTS
################################################################################

# 1. The following images must already be uploaded to the controller
#    See vars: section below
#    - nxos_image_1
#    - nxos_image_2
# 2. No need for fabric or switches
#
# Example vars for dcnm_image_policy integration tests
# Add to cisco/dcnm/playbooks/dcnm_tests.yaml)
#
# vars:
#   # This testcase field can run any test in the tests directory for the role
#   testcase: dcnm_image_policy_deleted
#   fabric_name: f1
#   username: admin
#   password: "foobar"
#   switch_username: admin
#   switch_password: "foobar"
#   spine1: 172.22.150.114
#   spine2: 172.22.150.115
#   nxos_image_1: n9000-dk9.10.2.5.M.bin
#   nxos_image_2: n9000-dk9.10.3.1.F.bin

################################################################################
# SETUP
################################################################################
# TODO: Add file upload task here
################################################################################
# QUERY - TEST - Delete files
################################################################################
# Expected result
# TODO - Add expected result here
################################################################################
# QUERY - TEST - Query files
################################################################################
# Expected result
# TODO - Add expected result here
- name: QUERY - TEST - Query files
  cisco.dcnm.dcnm_bootflash:
      state: query
      files:
      - "{{ nxos_image_1 }}"
      - "{{ nxos_image_2 }}"
      switches:
      - ip_address: "{{ spine1 }}"
      - ip_address: "{{ spine2 }}"
  register: result

- debug:
    var: result

- name: Prepare assertions
  set_fact:
    diff0_filename: "{{ nxos_image_1 }} in result.diff[0].{{ spine1 }}.filename"
    diff1_filename: "{{ nxos_image_1 }} not in result.diff[1].{{ spine1 }}.filename"
    diff2_filename: "{{ nxos_image_1 }} in result.diff[2].{{ spine2 }}.filename"
    diff3_filename: "{{ nxos_image_2 }} in result.diff[3].{{ spine2 }}.filename"
    response0_return_code: "200 in result.response[0].RETURN_CODE"
    response0_message: "OK in result.response[0].MESSAGE"
    response0_method: "GET in result.response[0].METHOD"
    result0_found: "true in result.result[0].{{ spine1 }}.found"
    result1_found: "false in result.result[1].{{ spine1 }}.found"
    result2_found: "true in result.result[2].{{ spine2 }}.found"
    result3_found: "true in result.result[3].{{ spine2 }}.found"
    result0_success: "true in result.result[0].{{ spine1 }}.success"
    result1_success: "false in result.result[1].{{ spine1 }}.success"
    result2_success: "true in result.result[2].{{ spine2 }}.success"
    result3_success: "true in result.result[3].{{ spine2 }}.success"

- assert:
    that:
    - result.changed == false
    - result.failed == false
    - (result.diff | length) == 4
    - (result.response | length) == 4
    - diff0_filename
    - diff1_filename
    - diff2_filename
    - diff3_filename
    - response0_return_code
    - response0_message
    - response0_method
    - (result.metadata | length) == 4
    - result.metadata[0].action == "bootflash_query"
    - result.metadata[0].check_mode == False
    - result.metadata[0].sequence_number == 1
    - result.metadata[0].state == "query"
    - result.metadata[1].action == "bootflash_query"
    - result.metadata[1].check_mode == False
    - result.metadata[1].sequence_number == 2
    - result.metadata[1].state == "query"
    - result.metadata[2].action == "bootflash_query"
    - result.metadata[2].check_mode == False
    - result.metadata[2].sequence_number == 3
    - result.metadata[2].state == "query"
    - result.metadata[3].action == "bootflash_query"
    - result.metadata[3].check_mode == False
    - result.metadata[3].sequence_number == 4
    - result.metadata[3].state == "query"
    - (result.result | length) == 4
    - result0_found
    - result1_found
    - result2_found
    - result3_found
    - result0_success
    - result1_success
    - result2_success
    - result3_success


